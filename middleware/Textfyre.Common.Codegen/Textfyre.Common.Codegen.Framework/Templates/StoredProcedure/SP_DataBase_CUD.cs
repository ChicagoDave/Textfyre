/*
 *  DO NOT EDIT THIS CLASS.
 * 
 *  This class is generated by a tool and should not be edited. If you need to change the functionality of 
 *  this class, you should discuss your changes with the team and they should be implemented in the
 *  appropriate template.
 *  
 */
using System;
using System.Reflection;
using System.Data;
using System.Text;
using System.Collections.Generic;
using System.Data.SqlClient;
using #systemNamespace#.Common.DataLayer;
using #systemNamespace#.Common.Logging;
using #rootNamespace#.BusinessLayer;

namespace #rootNamespace#.DataLayer {

    /// <summary>
    /// Stored Procedure Data Factory class.
    /// </summary>
    [Serializable()]
    public abstract class #spName#DataBase {

        #region Members

        /// <summary>
        /// Main database controller for this table.
        /// </summary>
        [NonSerialized]
        private DBController _mainDBController;

        /// <summary>
        /// Main error and logging controller for this table.
        /// </summary>
        [NonSerialized]
        private DBController _errorDBController;

        /// <summary>
        /// Internal parameter factory instance.
        /// </summary>
        private #spName#ParameterFactory _parameterFactory = new #spName#ParameterFactory();

        #endregion      

        #region Constructor
        /// <summary> 
        /// Empty default constructor. 
        /// </summary> 
        public #spName#DataBase() {
            GetDBControllers();
        }
        #endregion

        /// <summary>
        /// Parameter Factory property.
        /// </summary>
        protected #spName#ParameterFactory ParameterFactory {
            get { return _parameterFactory; }
        }

        /// <summary>
        /// MainDBController property.
        /// </summary>
        protected DBController MainDBController {
            get { return _mainDBController; }
        }

        /// <summary>
        /// ErrorDBController property.
        /// </summary>
        protected DBController ErrorDBController {
            get { return _errorDBController; }
        }

        /// <summary>
        /// Retrieves controllers using attribute search.
        /// </summary>
        private void GetDBControllers() {
            Type type = this.GetType();

            //Querying Class Attributes
            foreach (Attribute attr in type.GetCustomAttributes(true)) {
                if (attr.GetType() == typeof(DataSourceAttribute)) {
                    DataSourceAttribute dataSourceAttribute = attr as DataSourceAttribute;
                    _mainDBController = dataSourceAttribute.MainDBController;
                    _errorDBController = dataSourceAttribute.ErrorDBController;
                    break;
                }
            }
        }

        #region Execute Methods
        /// <summary>
        /// Execute stored procedure and return a scalar.
        /// </summary>
        protected object ExecuteSPGetScalar(string StoredProcedureName, List<SqlParameter> Parameters) {
            return ExecuteScalar(StoredProcedureName, Parameters);
        }

        /// <summary>
        /// Execute stored procedure and return a record's affected count.
        /// </summary>
        protected int ExecuteSPNonScalar(string StoredProcedureName, List<SqlParameter> Parameters) {
            return ExecuteNonQuery(StoredProcedureName, Parameters);
        }

        /// <summary>
        /// Private method that creates and returns a SqlCommand object.
        /// </summary>
        private SqlCommand CreateCommand(string CommandText, List<SqlParameter> Parameters) {
            SqlCommand sqlCmd = _mainDBController.CurrentConnection.CreateCommand();
            sqlCmd.CommandText = CommandText;
            sqlCmd.CommandType = CommandType.StoredProcedure;

            if((Parameters != null) && (Parameters.Count > 0))
                sqlCmd.Parameters.AddRange(Parameters.ToArray());

            //If there is an existing transaction, join it
            if(_mainDBController.HasTransaction)
                sqlCmd.Transaction = _mainDBController.CurrentTransaction;

            return sqlCmd;
        }

        /// <summary>
        /// Execute the "nonquery" database request.
        /// </summary>
        private int ExecuteNonQuery(string CommandText, List<SqlParameter> Parameters) {
            int rowsAffected = 0;

            try {
                if(!_mainDBController.HasTransaction)
                    _mainDBController.CurrentConnection.Open();

                SqlCommand sqlCmd = CreateCommand(CommandText, Parameters);
                rowsAffected = sqlCmd.ExecuteNonQuery();
                sqlCmd.Parameters.Clear();
            } catch (SqlException sqlEx) {
                LogSqlException("ExecuteNonQuery", sqlEx);                
                throw;
            } catch (Exception ex) {
                LogGenericException("ExecuteNonQuery", ex);
                throw;
            } finally {                
                if(!_mainDBController.HasTransaction) {
                    if(_mainDBController.CurrentConnection.State != ConnectionState.Closed)
                        _mainDBController.CurrentConnection.Close();
                }
            }

            return rowsAffected;
        }

        /// <summary>
        /// Execute the scalar database request.
        /// </summary>
        private object ExecuteScalar(string CommandText, List<SqlParameter> Parameters) {             
            object o = null;

            try {
                if(!_mainDBController.HasTransaction)
                    _mainDBController.CurrentConnection.Open();

                SqlCommand sqlCmd = CreateCommand(CommandText, Parameters);
                o = sqlCmd.ExecuteScalar();
                sqlCmd.Parameters.Clear();
            } catch (SqlException sqlEx) {
                LogSqlException("ExecuteScalar", sqlEx);                
                throw;
            } catch (Exception ex) {
                LogGenericException("ExecuteScalar", ex);
                throw;
            } finally {
                if(!_mainDBController.HasTransaction) {
                    if(_mainDBController.CurrentConnection.State != ConnectionState.Closed)
                        _mainDBController.CurrentConnection.Close();
                }
            }
  
            return o;
        }

        /// <summary>
        /// Log a Sql Exception.
        /// </summary>
        private void LogSqlException(string methodName, SqlException sqlEx) {            
            if (sqlEx.Class >= 20) {
                Logger.LogMessage(typeof(#spName#DataBase).FullName, methodName, sqlEx,
                                  Severity.FATAL, LogLocation.ALL);
            } else if ((sqlEx.Class >= 11) && (sqlEx.Class < 20)) {
                Logger.LogMessage(typeof(#spName#DataBase).FullName, methodName, sqlEx,
                                  Severity.ERROR, LogLocation.ALL);
            } else if (sqlEx.Class < 11) {
                Logger.LogMessage(typeof(#spName#DataBase).FullName, methodName, sqlEx,
                                  Severity.INFO, LogLocation.ALL);
            }
        }

        /// <summary>
        /// Log a generic exception.
        /// </summary>
        private void LogGenericException(string methodName, Exception ex) {
            Logger.LogMessage(typeof(#spName#DataBase).FullName, methodName, ex,
                              Severity.ERROR, LogLocation.ALL);
        }
        #endregion
    }

}