/*
 *  DO NOT EDIT THIS CLASS.
 * 
 *  This class is generated by a tool and should not be edited. If you need to change the functionality of 
 *  this class, you should discuss your changes with the team and they should be implemented in the
 *  appropriate template.
 *  
 */
using System;
using System.Reflection;
using System.Data;
using System.Text;
using System.Collections.Generic;
using System.Data.SqlClient;
using #systemNamespace#.Common.DataLayer;
using #systemNamespace#.Common.Logging;
using #rootNamespace#.BusinessLayer;

namespace #rootNamespace#.DataLayer {

    [Serializable()]
    public abstract class #spName#DataBase {

        #region Members

        /// <summary>
        /// Main database controller for this table.
        /// </summary>
        [NonSerialized]
        private DBController _mainDBController;

        /// <summary>
        /// Main error and logging controller for this table.
        /// </summary>
        [NonSerialized]
        private DBController _errorDBController;

        #spParmFactoryMember#        

        private const string SPROC_NAME = "#spName#";
        private ICacheManager _cacheManager;
        private string _cacheExpiration;
        
        #endregion      

        #region Constructor
        /// <summary> 
        /// Empty default constructor. 
        /// </summary> 
        public #spName#DataBase() {
            GetDBControllers();
            GetCacheManager();
        }
        #endregion

        #spParmFactoryProperty#        

        public ICacheManager CacheManager {
            get { return _cacheManager; }
        }
    
        /// <summary>
        /// Retrieves controllers using attribute search.
        /// </summary>
        private void GetDBControllers() {
            Type type = this.GetType();

            //Querying Class Attributes
            foreach (Attribute attr in type.GetCustomAttributes(true)) {
                if (attr.GetType() == typeof(DataSourceAttribute)) {
                    DataSourceAttribute dataSourceAttribute = attr as DataSourceAttribute;
                    _mainDBController = dataSourceAttribute.MainDBController;
                    _errorDBController = dataSourceAttribute.ErrorDBController;
                    break;
                }
            }
        }

        private void GetCacheManager() {
            Type type = this.GetType();

            //Querying Class Attributes
            foreach (Attribute attr in type.GetCustomAttributes(true)) {
                if (attr.GetType() == typeof(CacheAttribute)) {
                    CacheAttribute cacheAttribute = attr as CacheAttribute;
                    _cacheManager = cacheAttribute.CacheManager;
                    _cacheExpiration = cacheAttribute.Expiration;
                    break;
                }
            }

            // If it doesn't find a cache attribute, then caching is not enabled for this domain object.
        }

        #region Execute Methods
        protected List<#spName#Recordset> ExecuteSPGetCollection(string StoredProcedureName, List<SqlParameter> Parameters) {
            return ExecuteReader(StoredProcedureName, Parameters);
        }

        protected DataTable ExecuteSPGetDataTable(string StoredProcedureName, List<SqlParameter> Parameters) {
            return ExecuteFillDataTable(StoredProcedureName, Parameters);
        }

        protected #spName#Recordset ExecuteSPGetRecord(string StoredProcedureName, List<SqlParameter> Parameters) {
            List<#spName#Recordset> new#spName#RecordsetList = ExecuteReader(StoredProcedureName, Parameters);
            if(new#spName#RecordsetList.Count == 0)
                return null;

            return new#spName#RecordsetList[0];
        }
        #endregion

        private SqlCommand CreateCommand(string CommandText, List<SqlParameter> Parameters) {
            SqlCommand sqlCmd = _mainDBController.CurrentConnection.CreateCommand();
            sqlCmd.CommandText = CommandText;
            sqlCmd.CommandType = CommandType.StoredProcedure;           

            if((Parameters != null) && (Parameters.Count > 0))
                sqlCmd.Parameters.AddRange(Parameters.ToArray());

            return sqlCmd;
        }

        private DataTable ExecuteFillDataTable(string CommandText, List<SqlParameter> Parameters) {            
            SqlDataReader selectReader = null;
            SqlCommand sqlCmd = null;
            DataTable selectTable = new DataTable();

            try {
                _mainDBController.CurrentConnection.Open();
                sqlCmd = CreateCommand(CommandText, Parameters);
                selectReader = sqlCmd.ExecuteReader();
                
                // 
                // Use custom adapter to convert the reader to a datatable. 
                //
                SqlDataReaderAdapter Adapter = new SqlDataReaderAdapter();
                Adapter.Fill(selectTable, selectReader);                
            } catch (SqlException sqlEx) {
                LogSqlException("ExecuteFillDataTable", sqlEx);                
                throw;
            } catch (Exception ex) {
                LogGenericException("ExecuteFillDataTable", ex);
                throw;
            } finally {
                if((selectReader != null) && (!selectReader.IsClosed))
                    selectReader.Close();                   

                if(_mainDBController.CurrentConnection.State != ConnectionState.Closed)
                    _mainDBController.CurrentConnection.Close();
                
                if(sqlCmd != null)
                    sqlCmd.Parameters.Clear();
            }

            return selectTable;
        }

        /// <summary> 
        /// Load Items collection with data. 
        /// </summary> 
        /// <param name="dr#spName#"></param> 
        private List<#spName#Recordset> LoadItems(SqlDataReader dr#spName#)
        {           
            List<#spName#Recordset> new#spName#RecordsetList = new List<#spName#Recordset>();

            // read through datareader, add items 
            while (dr#spName#.Read())
            {
                #spName#Recordset new#spName#Recordset = new #spName#Recordset();
#loadRecordset#
                new#spName#Recordset.IsDirty = false;
                new#spName#RecordsetList.Add(new#spName#Recordset);
            }
            
            return new#spName#RecordsetList;
        }

        private List<#spName#Recordset> ExecuteReader(string CommandText, List<SqlParameter> Parameters) {
            SqlDataReader sqlDataReader                      = null;
            List<#spName#Recordset> new#spName#RecordsetList = null;
            SqlCommand sqlCmd                                = null;
            string cacheKey                                  = null;

            if (_cacheManager != null) {
                cacheKey = _cacheManager.CreateCacheKey(SPROC_NAME, Parameters);

                if (_cacheManager.Exists2(cacheKey)) {
                    new#spName#RecordsetList = _cacheManager.Get2< List<#spName#Recordset> >(cacheKey);
                }
            }

            if (new#spName#RecordsetList == null) {             
                try {
                    _mainDBController.CurrentConnection.Open();
                    sqlCmd = CreateCommand(CommandText, Parameters);
                    sqlDataReader = sqlCmd.ExecuteReader();

                    new#spName#RecordsetList = LoadItems(sqlDataReader);                
                } catch (SqlException sqlEx) {
                    LogSqlException("ExecuteReader", sqlEx);                
                    throw;
                } catch (Exception ex) {
                    LogGenericException("ExecuteReader", ex);
                    throw;
                } finally {
                    if((sqlDataReader != null) && (!sqlDataReader.IsClosed))
                        sqlDataReader.Close();

                    if(_mainDBController.CurrentConnection.State != ConnectionState.Closed)
                        _mainDBController.CurrentConnection.Close();

                    if(sqlCmd != null)
                        sqlCmd.Parameters.Clear();
                }

                if (_cacheManager != null) {
                    _cacheManager.Set2(cacheKey, new#spName#RecordsetList, _cacheExpiration);                    
                }
            }

            return new#spName#RecordsetList;
        }

        private void LogSqlException(string methodName, SqlException sqlEx) {            
            if (sqlEx.Class >= 20) {
                Logger.LogMessage(typeof(#spName#DataBase).FullName, methodName, sqlEx,
                                  Severity.FATAL, LogLocation.ALL);
            } else if ((sqlEx.Class >= 11) && (sqlEx.Class < 20)) {
                Logger.LogMessage(typeof(#spName#DataBase).FullName, methodName, sqlEx,
                                  Severity.ERROR, LogLocation.ALL);
            } else if (sqlEx.Class < 11) {
                Logger.LogMessage(typeof(#spName#DataBase).FullName, methodName, sqlEx,
                                  Severity.INFO, LogLocation.ALL);
            }
        }

        private void LogGenericException(string methodName, Exception ex) {
            Logger.LogMessage(typeof(#spName#DataBase).FullName, methodName, ex,
                              Severity.ERROR, LogLocation.ALL);
        }
    }

}