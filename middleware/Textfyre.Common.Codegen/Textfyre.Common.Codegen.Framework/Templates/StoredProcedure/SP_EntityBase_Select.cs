/*
 *  DO NOT EDIT THIS CLASS.
 * 
 *  This class is generated by a tool and should not be edited. If you need to change the functionality of 
 *  this class, you should discuss your changes with the team and they should be implemented in the
 *  appropriate template.
 *  
 */
using System; 
using System.Data; 
using System.Data.SqlClient;
using System.Collections.Generic;
using #rootNamespace#.DataLayer;

namespace #rootNamespace#.BusinessLayer { 
    
    [Serializable()]
    public abstract class #spName#Base {
        #region Members
        private #spName#Collection _items = new #spName#Collection();
        private #spName#Recordset _recordset = new #spName#Recordset();

        [NonSerialized]
        private #spName#Data _dataFactory;
        #endregion

        #region Events
#eventHandlers#
        #endregion
        
        /// <summary> 
        /// Empty default constructor. 
        /// </summary> 
        public #spName#Base() {
            _dataFactory = new #spName#Data();
        }
        
        /// <summary> 
        /// Recordset constructor. 
        /// </summary> 
        public #spName#Base(#spName#Recordset Recordset) { 
            _dataFactory = new #spName#Data();
            _recordset = Recordset; 
            _recordset.IsDirty = false; 
        } 
        
        #region Properties
#publicProperties#
                
        public virtual #spName#Recordset Recordset { 
            get { return _recordset; } 
            set { _recordset = value; } 
        } 
        
        public virtual bool IsDirty { 
            get { return _recordset.IsDirty; } 
            set { _recordset.IsDirty = value; } 
        } 
        
        protected #spName#Data DataFactory { 
            get {
                if (_dataFactory == null)
                    _dataFactory = new #spName#Data();
                return _dataFactory;
            } 
        }

        public #spName#Collection Items {
            get {
                if (_items == null)
                    _items = new #spName#Collection();
                return _items;
            }

            set { _items = value; }
        }

        public List<#spName#Recordset> ItemsData {
            get {
                List<#spName#Recordset> recs = new List<#spName#Recordset>();
                foreach(#spName# entity in Items) {
                    recs.Add((#spName#Recordset)entity.Recordset.Clone());
                }

                return recs;
            }
        }

        #endregion 

        protected void Fill(List<#spName#Recordset> recs) {
            Items.Fill(recs);
            _items.IsCollectionDirty = false;
        }

        #region Sorting Delegates
        /// <summary>
        /// Internal class containing sorting delegates.
        /// </summary>
        public class SortBy
        {
#sortDelegates#
        }

        #endregion
    }

} 