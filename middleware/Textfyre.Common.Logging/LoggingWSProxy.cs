//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;
using System.Configuration;

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.3038.
// 

namespace Textfyre.Common.Logging {

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "LoggingSoap", Namespace = "http://www.textfyre.com/")]
    public partial class LoggingWSProxy : System.Web.Services.Protocols.SoapHttpClientProtocol {

        #region Constants (section NOT added by proxy generator)
        private const string LOGGING_WEB_SERVICE_URL = "LoggingWebServiceURL";
        #endregion

        private System.Threading.SendOrPostCallback LogMessageOperationCompleted;

        /// <remarks/>
        public LoggingWSProxy() {
            /* The following lines of code are NOT added by the proxy generator */
            string pathToLoggingWebService = 
                    ConfigurationManager.AppSettings[ string.Concat(LOGGING_WEB_SERVICE_URL, ",", Environment.MachineName) ];

            /* The following lines of code are NOT added by the proxy generator */
            if (!string.IsNullOrEmpty(pathToLoggingWebService)) {
                this.Url = pathToLoggingWebService;
            }
        }

        /// <remarks/>
        public event LogMessageCompletedEventHandler LogMessageCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textfyre.com/LogMessage", RequestNamespace = "http://www.textfyre.com/", OneWay = true, Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LogMessage(string className, string methodName, string message, Severity messageSeverity, LogLocation messageLogLocation) {
                this.Invoke("LogMessage", new object[] {
                    className,
                    methodName,
                    message,
                    messageSeverity,
                    messageLogLocation});
        }

        /// <remarks/>
        public System.IAsyncResult BeginLogMessage(string className, string methodName, string message, Severity messageSeverity, LogLocation messageLogLocation, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LogMessage", new object[] {
                    className,
                    methodName,
                    message,
                    messageSeverity,
                    messageLogLocation}, callback, asyncState);
        }

        /// <remarks/>
        public void EndLogMessage(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void LogMessageAsync(string className, string methodName, string message, Severity messageSeverity, LogLocation messageLogLocation) {
            this.LogMessageAsync(className, methodName, message, messageSeverity, messageLogLocation, null);
        }

        /// <remarks/>
        public void LogMessageAsync(string className, string methodName, string message, Severity messageSeverity, LogLocation messageLogLocation, object userState) {
            if ((this.LogMessageOperationCompleted == null)) {
                this.LogMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogMessageOperationCompleted);
            }
            this.InvokeAsync("LogMessage", new object[] {
                    className,
                    methodName,
                    message,
                    messageSeverity,
                    messageLogLocation}, this.LogMessageOperationCompleted, userState);
        }

        private void OnLogMessageOperationCompleted(object arg) {
            if ((this.LogMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.textfyre.com/")]
    public enum Severity {

        /// <remarks/>
        DEBUG,

        /// <remarks/>
        INFO,

        /// <remarks/>
        WARN,

        /// <remarks/>
        ERROR,

        /// <remarks/>
        FATAL,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.textfyre.com/")]
    public enum LogLocation {

        /// <remarks/>
        ALL,

        /// <remarks/>
        APPLICATION_EVENT_LOG,

        /// <remarks/>
        DATABASE,

        /// <remarks/>
        TEXT_FILE,

        /// <remarks/>
        EMAIL,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void LogMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}