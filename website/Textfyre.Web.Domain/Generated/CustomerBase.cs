/*
 *  DO NOT EDIT THIS CLASS.
 * 
 *  This class is generated by a tool and should not be edited. If you need to change the functionality of 
 *  this class, you should discuss your changes with the team and they should be implemented in the
 *  appropriate template.
 *  
 */
using System; 
using System.Data; 
using System.Data.SqlClient;
using System.Collections.Generic;
using System.ComponentModel;
using Textfyre.TextfyreWeb.DataLayer;

namespace Textfyre.TextfyreWeb.BusinessLayer { 
    
    /// <summary>
    /// Base Customer domain class. This class is generated for each build and should never be modified
    /// directly. To change the functionality, the domainBase.cs template should be modified and related code
    /// generations tested.
    /// </summary>
    [Serializable()]
    public abstract class CustomerBase : INotifyPropertyChanged {

        #region Members
        /// <summary>
        /// Internal items collection for the Customer domain class.
        /// </summary>
        private Textfyre.TextfyreWeb.BusinessLayer.CustomerCollection _items = new CustomerCollection();
        /// <summary>
        /// Internal recordset for the Customer domain class.
        /// </summary>
        private Textfyre.TextfyreWeb.BusinessLayer.CustomerRecordset _recordset = new CustomerRecordset();

        /// <summary>
        /// Non-serialized instance of the Customer data layer class.
        /// </summary>
        [NonSerialized]
        private Textfyre.TextfyreWeb.DataLayer.CustomerData _dataFactory;

        /// <summary>
        /// String constant containing 'Customer'.
        /// </summary>
        private const string TABLE_NAME = "Customer";

        /// <summary>
        /// Property Changed event definition.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Notify Property changed event handler.
        /// </summary>
        private void NotifyPropertyChanged(String info) {
            if (PropertyChanged != null) {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }

        #endregion
        
        #region Constructors
        /// <summary> 
        /// Empty default constructor. 
        /// </summary> 
        public CustomerBase() {
            _dataFactory = new CustomerData();
        }

        public CustomerBase(Guid UserId) : this() {
				Load(UserId);
		}                     
        
        /// <summary> 
        /// Recordset constructor. 
        /// </summary> 
        public CustomerBase(Textfyre.TextfyreWeb.BusinessLayer.CustomerRecordset Recordset) : this() {             
            _recordset = Recordset; 
            _recordset.IsDirty = false; 
        }
        #endregion 
        
        #region Methods
        
        /// <summary>
        /// Load method that retrieves a record from the Customer table by the primary key id.
        /// </summary>
        public Textfyre.TextfyreWeb.BusinessLayer.CustomerRecordset Load(Guid UserId) {
            _recordset = DataFactory.GetCustomerById(UserId);
            return _recordset;
        }

        /// <summary>
        /// LoadAll function that will load all records from the Customer table.
        /// </summary>
        public Textfyre.TextfyreWeb.BusinessLayer.CustomerCollection LoadAll() {
            Fill(DataFactory.GetAllCustomer());
            return _items;
        }

        /// <summary>
        /// Mark a record for deletion. Record is not physically deleted until .Save() is called.
        /// </summary>
        public virtual void Delete() {
            _recordset.IsDeleted = true;
        }

        /// <summary>
        /// Delete a record and commit the deletion to the database.
        /// </summary>
        public virtual void DeleteNow() {
            _recordset.IsDeleted = true;
            Save();
        }

        /// <summary>
        /// Overload for calling save without concern for the new primary key on insert.
        /// </summary>
        public virtual int Save() {
            Guid newPrimaryKey;
            return Save(out newPrimaryKey);
        }

        /// <summary>
        /// Save the current record to the database.
        /// </summary>
        public virtual int Save(out Guid newPrimaryKey)
        {
            int ReturnValue = -1;
            newPrimaryKey = Guid.Empty;
            
            if (_recordset.IsDeleted) {
                ReturnValue = DataFactory.DeleteCustomer(_recordset.UserId);                
            } else {
                if (_recordset.UserId == Guid.Empty) {
                    newPrimaryKey = _dataFactory.InsertCustomer(_recordset);
					if (newPrimaryKey != Guid.Empty)
						ReturnValue = -1;
					else
						ReturnValue = 0;;                    
                } else {
                    if(_recordset.IsDirty) {    
                        ReturnValue = DataFactory.UpdateCustomer(_recordset);                        
                    }
                }

                _recordset.IsDirty = false;
            }

            if (DataFactory.CacheManager != null) {
                string cacheKey = DataFactory.CacheManager.CreateCacheKey(TABLE_NAME, null);
                DataFactory.CacheManager.Remove2(cacheKey);
            }

            return ReturnValue;
        }


        /// <summary>
        /// Fill a collection of recordsets from the data layer list.
        /// </summary>
        protected void Fill(List<Textfyre.TextfyreWeb.BusinessLayer.CustomerRecordset> recs) {
            Items.Fill(recs);
            _items.IsCollectionDirty = false;
        }
        #endregion

        #region Properties


		public virtual Guid UserId {
			get { return _recordset.UserId; }
			set {
				if (_recordset.UserId != value) {
					_recordset.UserId = value;
					NotifyPropertyChanged("UserId");
				}
			}
		}

		public virtual string School {
			get { return _recordset.School; }
			set {
				if (_recordset.School != value) {
					_recordset.School = value;
					NotifyPropertyChanged("School");
				}
			}
		}

		public virtual string FirstName {
			get { return _recordset.FirstName; }
			set {
				if (_recordset.FirstName != value) {
					_recordset.FirstName = value;
					NotifyPropertyChanged("FirstName");
				}
			}
		}

		public virtual string LastName {
			get { return _recordset.LastName; }
			set {
				if (_recordset.LastName != value) {
					_recordset.LastName = value;
					NotifyPropertyChanged("LastName");
				}
			}
		}

		public virtual string Address1 {
			get { return _recordset.Address1; }
			set {
				if (_recordset.Address1 != value) {
					_recordset.Address1 = value;
					NotifyPropertyChanged("Address1");
				}
			}
		}

		public virtual string Address2 {
			get { return _recordset.Address2; }
			set {
				if (_recordset.Address2 != value) {
					_recordset.Address2 = value;
					NotifyPropertyChanged("Address2");
				}
			}
		}

		public virtual string City {
			get { return _recordset.City; }
			set {
				if (_recordset.City != value) {
					_recordset.City = value;
					NotifyPropertyChanged("City");
				}
			}
		}

		public virtual string State {
			get { return _recordset.State; }
			set {
				if (_recordset.State != value) {
					_recordset.State = value;
					NotifyPropertyChanged("State");
				}
			}
		}

		public virtual string PostalCode {
			get { return _recordset.PostalCode; }
			set {
				if (_recordset.PostalCode != value) {
					_recordset.PostalCode = value;
					NotifyPropertyChanged("PostalCode");
				}
			}
		}

		public virtual string CountryCode {
			get { return _recordset.CountryCode; }
			set {
				if (_recordset.CountryCode != value) {
					_recordset.CountryCode = value;
					NotifyPropertyChanged("CountryCode");
				}
			}
		}

		public virtual string PhoneNumber {
			get { return _recordset.PhoneNumber; }
			set {
				if (_recordset.PhoneNumber != value) {
					_recordset.PhoneNumber = value;
					NotifyPropertyChanged("PhoneNumber");
				}
			}
		}

		public virtual string MobileNumber {
			get { return _recordset.MobileNumber; }
			set {
				if (_recordset.MobileNumber != value) {
					_recordset.MobileNumber = value;
					NotifyPropertyChanged("MobileNumber");
				}
			}
		}

		public virtual bool HasDownloads {
			get { return _recordset.HasDownloads; }
			set {
				if (_recordset.HasDownloads != value) {
					_recordset.HasDownloads = value;
					NotifyPropertyChanged("HasDownloads");
				}
			}
		}

		public virtual string ValidationId {
			get { return _recordset.ValidationId; }
			set {
				if (_recordset.ValidationId != value) {
					_recordset.ValidationId = value;
					NotifyPropertyChanged("ValidationId");
				}
			}
		}

		public virtual DateTime LastActivityDate {
			get { return _recordset.LastActivityDate; }
			set {
				if (_recordset.LastActivityDate != value) {
					_recordset.LastActivityDate = value;
					NotifyPropertyChanged("LastActivityDate");
				}
			}
		}


        /// <summary>
        /// Current recordset.
        /// </summary>
        public virtual Textfyre.TextfyreWeb.BusinessLayer.CustomerRecordset Recordset { 
            get { return _recordset; } 
            set { _recordset = value; } 
        } 
        
        /// <summary>
        /// Flag that identifies a modified record.
        /// </summary>
        public virtual bool IsDirty { 
            get { return _recordset.IsDirty; } 
            set { _recordset.IsDirty = value; } 
        } 

        /// <summary>
        /// Instance of DataBase class to enable data layer execution.
        /// </summary>
        protected Textfyre.TextfyreWeb.DataLayer.CustomerData DataFactory { 
            get {
                if (_dataFactory == null)
                    _dataFactory = new CustomerData();
                return _dataFactory;
            } 
        }

        /// <summary>
        /// Collection of records.
        /// </summary>
        public Textfyre.TextfyreWeb.BusinessLayer.CustomerCollection Items {
            get {
                if (_items == null)
                    _items = new Textfyre.TextfyreWeb.BusinessLayer.CustomerCollection();
                return _items;
            }
            set {
                _items = value;
            }
        }

        /// <summary>
        /// Collection of recordsets.
        /// </summary>
        public List<Textfyre.TextfyreWeb.BusinessLayer.CustomerRecordset> ItemsData {
            get {
                List<Textfyre.TextfyreWeb.BusinessLayer.CustomerRecordset> recs = new List<Textfyre.TextfyreWeb.BusinessLayer.CustomerRecordset>();
                foreach(Textfyre.TextfyreWeb.BusinessLayer.Customer entity in Items) {
                    recs.Add((Textfyre.TextfyreWeb.BusinessLayer.CustomerRecordset)entity.Recordset.Clone());
                }

                return recs;
            }
        }
        #endregion

        #region Sorting Delegates
        /// <summary>
        /// Internal class containing sorting delegates.
        /// </summary>
        public class SortBy
        {
			public static Comparison<Customer> UserIdColumnASC =
				delegate(Customer o1, Customer o2)
				{
					return o1.UserId.CompareTo(o2.UserId);
				};

			public static Comparison<Customer> UserIdColumnDESC =
				delegate(Customer o1, Customer o2)
				{
					return o2.UserId.CompareTo(o1.UserId);
				};

			public static Comparison<Customer> SchoolColumnASC =
				delegate(Customer o1, Customer o2)
				{
					return o1.School.CompareTo(o2.School);
				};

			public static Comparison<Customer> SchoolColumnDESC =
				delegate(Customer o1, Customer o2)
				{
					return o2.School.CompareTo(o1.School);
				};

			public static Comparison<Customer> FirstNameColumnASC =
				delegate(Customer o1, Customer o2)
				{
					return o1.FirstName.CompareTo(o2.FirstName);
				};

			public static Comparison<Customer> FirstNameColumnDESC =
				delegate(Customer o1, Customer o2)
				{
					return o2.FirstName.CompareTo(o1.FirstName);
				};

			public static Comparison<Customer> LastNameColumnASC =
				delegate(Customer o1, Customer o2)
				{
					return o1.LastName.CompareTo(o2.LastName);
				};

			public static Comparison<Customer> LastNameColumnDESC =
				delegate(Customer o1, Customer o2)
				{
					return o2.LastName.CompareTo(o1.LastName);
				};

			public static Comparison<Customer> Address1ColumnASC =
				delegate(Customer o1, Customer o2)
				{
					return o1.Address1.CompareTo(o2.Address1);
				};

			public static Comparison<Customer> Address1ColumnDESC =
				delegate(Customer o1, Customer o2)
				{
					return o2.Address1.CompareTo(o1.Address1);
				};

			public static Comparison<Customer> Address2ColumnASC =
				delegate(Customer o1, Customer o2)
				{
					return o1.Address2.CompareTo(o2.Address2);
				};

			public static Comparison<Customer> Address2ColumnDESC =
				delegate(Customer o1, Customer o2)
				{
					return o2.Address2.CompareTo(o1.Address2);
				};

			public static Comparison<Customer> CityColumnASC =
				delegate(Customer o1, Customer o2)
				{
					return o1.City.CompareTo(o2.City);
				};

			public static Comparison<Customer> CityColumnDESC =
				delegate(Customer o1, Customer o2)
				{
					return o2.City.CompareTo(o1.City);
				};

			public static Comparison<Customer> StateColumnASC =
				delegate(Customer o1, Customer o2)
				{
					return o1.State.CompareTo(o2.State);
				};

			public static Comparison<Customer> StateColumnDESC =
				delegate(Customer o1, Customer o2)
				{
					return o2.State.CompareTo(o1.State);
				};

			public static Comparison<Customer> PostalCodeColumnASC =
				delegate(Customer o1, Customer o2)
				{
					return o1.PostalCode.CompareTo(o2.PostalCode);
				};

			public static Comparison<Customer> PostalCodeColumnDESC =
				delegate(Customer o1, Customer o2)
				{
					return o2.PostalCode.CompareTo(o1.PostalCode);
				};

			public static Comparison<Customer> CountryCodeColumnASC =
				delegate(Customer o1, Customer o2)
				{
					return o1.CountryCode.CompareTo(o2.CountryCode);
				};

			public static Comparison<Customer> CountryCodeColumnDESC =
				delegate(Customer o1, Customer o2)
				{
					return o2.CountryCode.CompareTo(o1.CountryCode);
				};

			public static Comparison<Customer> PhoneNumberColumnASC =
				delegate(Customer o1, Customer o2)
				{
					return o1.PhoneNumber.CompareTo(o2.PhoneNumber);
				};

			public static Comparison<Customer> PhoneNumberColumnDESC =
				delegate(Customer o1, Customer o2)
				{
					return o2.PhoneNumber.CompareTo(o1.PhoneNumber);
				};

			public static Comparison<Customer> MobileNumberColumnASC =
				delegate(Customer o1, Customer o2)
				{
					return o1.MobileNumber.CompareTo(o2.MobileNumber);
				};

			public static Comparison<Customer> MobileNumberColumnDESC =
				delegate(Customer o1, Customer o2)
				{
					return o2.MobileNumber.CompareTo(o1.MobileNumber);
				};

			public static Comparison<Customer> HasDownloadsColumnASC =
					delegate(Customer o1, Customer o2)
					{
						return Nullable.Compare<bool>(o1.HasDownloads, o2.HasDownloads);
					};

			public static Comparison<Customer> HasDownloadsColumnDESC =
					delegate(Customer o1, Customer o2)
					{
						return Nullable.Compare<bool>(o2.HasDownloads, o1.HasDownloads);
					};

			public static Comparison<Customer> ValidationIdColumnASC =
				delegate(Customer o1, Customer o2)
				{
					return o1.ValidationId.CompareTo(o2.ValidationId);
				};

			public static Comparison<Customer> ValidationIdColumnDESC =
				delegate(Customer o1, Customer o2)
				{
					return o2.ValidationId.CompareTo(o1.ValidationId);
				};

			public static Comparison<Customer> LastActivityDateColumnASC =
				delegate(Customer o1, Customer o2)
				{
					return o1.LastActivityDate.CompareTo(o2.LastActivityDate);
				};

			public static Comparison<Customer> LastActivityDateColumnDESC =
				delegate(Customer o1, Customer o2)
				{
					return o2.LastActivityDate.CompareTo(o1.LastActivityDate);
				};


        }

        #endregion
    } 
} 