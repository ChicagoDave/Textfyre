/*
 *  DO NOT EDIT THIS CLASS.
 * 
 *  This class is generated by a tool and should not be edited. If you need to change the functionality of 
 *  this class, you should discuss your changes with the team and they should be implemented in the
 *  appropriate template.
 *  
 */
using System; 
using System.Data; 
using System.Data.SqlClient;
using System.Collections.Generic;
using System.ComponentModel;
using Textfyre.TextfyreWeb.DataLayer;

namespace Textfyre.TextfyreWeb.BusinessLayer { 
    
    /// <summary>
    /// Base Download domain class. This class is generated for each build and should never be modified
    /// directly. To change the functionality, the domainBase.cs template should be modified and related code
    /// generations tested.
    /// </summary>
    [Serializable()]
    public abstract class DownloadBase : INotifyPropertyChanged {

        #region Members
        /// <summary>
        /// Internal items collection for the Download domain class.
        /// </summary>
        private Textfyre.TextfyreWeb.BusinessLayer.DownloadCollection _items = new DownloadCollection();
        /// <summary>
        /// Internal recordset for the Download domain class.
        /// </summary>
        private Textfyre.TextfyreWeb.BusinessLayer.DownloadRecordset _recordset = new DownloadRecordset();

        /// <summary>
        /// Non-serialized instance of the Download data layer class.
        /// </summary>
        [NonSerialized]
        private Textfyre.TextfyreWeb.DataLayer.DownloadData _dataFactory;

        /// <summary>
        /// String constant containing 'Download'.
        /// </summary>
        private const string TABLE_NAME = "Download";

        /// <summary>
        /// Property Changed event definition.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Notify Property changed event handler.
        /// </summary>
        private void NotifyPropertyChanged(String info) {
            if (PropertyChanged != null) {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }

        #endregion
        
        #region Constructors
        /// <summary> 
        /// Empty default constructor. 
        /// </summary> 
        public DownloadBase() {
            _dataFactory = new DownloadData();
        }

        public DownloadBase(Int32 DownloadId) : this() {
				Load(DownloadId);
		}                     
        
        /// <summary> 
        /// Recordset constructor. 
        /// </summary> 
        public DownloadBase(Textfyre.TextfyreWeb.BusinessLayer.DownloadRecordset Recordset) : this() {             
            _recordset = Recordset; 
            _recordset.IsDirty = false; 
        }
        #endregion 
        
        #region Methods
        
        /// <summary>
        /// Load method that retrieves a record from the Download table by the primary key id.
        /// </summary>
        public Textfyre.TextfyreWeb.BusinessLayer.DownloadRecordset Load(Int32 DownloadId) {
            _recordset = DataFactory.GetDownloadById(DownloadId);
            return _recordset;
        }

        /// <summary>
        /// LoadAll function that will load all records from the Download table.
        /// </summary>
        public Textfyre.TextfyreWeb.BusinessLayer.DownloadCollection LoadAll() {
            Fill(DataFactory.GetAllDownload());
            return _items;
        }

        /// <summary>
        /// Mark a record for deletion. Record is not physically deleted until .Save() is called.
        /// </summary>
        public virtual void Delete() {
            _recordset.IsDeleted = true;
        }

        /// <summary>
        /// Delete a record and commit the deletion to the database.
        /// </summary>
        public virtual void DeleteNow() {
            _recordset.IsDeleted = true;
            Save();
        }

        /// <summary>
        /// Overload for calling save without concern for the new primary key on insert.
        /// </summary>
        public virtual int Save() {
            Int32 newPrimaryKey;
            return Save(out newPrimaryKey);
        }

        /// <summary>
        /// Save the current record to the database.
        /// </summary>
        public virtual int Save(out Int32 newPrimaryKey)
        {
            int ReturnValue = -1;
            newPrimaryKey = -1;
            
            if (_recordset.IsDeleted) {
                ReturnValue = DataFactory.DeleteDownload(_recordset.DownloadId);                
            } else {
                if (_recordset.DownloadId == -1) {
                    newPrimaryKey = _dataFactory.InsertDownload(_recordset);
					if (newPrimaryKey != -1)
						ReturnValue = -1;
					else
						ReturnValue = 0;;                    
                } else {
                    if(_recordset.IsDirty) {    
                        ReturnValue = DataFactory.UpdateDownload(_recordset);                        
                    }
                }

                _recordset.IsDirty = false;
            }

            if (DataFactory.CacheManager != null) {
                string cacheKey = DataFactory.CacheManager.CreateCacheKey(TABLE_NAME, null);
                DataFactory.CacheManager.Remove2(cacheKey);
            }

            return ReturnValue;
        }


        /// <summary>
        /// Fill a collection of recordsets from the data layer list.
        /// </summary>
        protected void Fill(List<Textfyre.TextfyreWeb.BusinessLayer.DownloadRecordset> recs) {
            Items.Fill(recs);
            _items.IsCollectionDirty = false;
        }
        #endregion

        #region Properties


		public virtual Int32 DownloadId {
			get { return _recordset.DownloadId; }
			set {
				if (_recordset.DownloadId != value) {
					_recordset.DownloadId = value;
					NotifyPropertyChanged("DownloadId");
				}
			}
		}

		public virtual string ProductId {
			get { return _recordset.ProductId; }
			set {
				if (_recordset.ProductId != value) {
					_recordset.ProductId = value;
					NotifyPropertyChanged("ProductId");
				}
			}
		}

		public virtual Int32? PlatformId {
			get { return _recordset.PlatformId; }
			set {
				if (_recordset.PlatformId != value) {
					_recordset.PlatformId = value;
					NotifyPropertyChanged("PlatformId");
				}
			}
		}

		public virtual string Version {
			get { return _recordset.Version; }
			set {
				if (_recordset.Version != value) {
					_recordset.Version = value;
					NotifyPropertyChanged("Version");
				}
			}
		}

		public virtual DateTime? AvailableDate {
			get { return _recordset.AvailableDate; }
			set {
				if (_recordset.AvailableDate != value) {
					_recordset.AvailableDate = value;
					NotifyPropertyChanged("AvailableDate");
				}
			}
		}

		public virtual string Filename {
			get { return _recordset.Filename; }
			set {
				if (_recordset.Filename != value) {
					_recordset.Filename = value;
					NotifyPropertyChanged("Filename");
				}
			}
		}

		public virtual bool? IsLocked {
			get { return _recordset.IsLocked; }
			set {
				if (_recordset.IsLocked != value) {
					_recordset.IsLocked = value;
					NotifyPropertyChanged("IsLocked");
				}
			}
		}

		public virtual bool? IntelMac {
			get { return _recordset.IntelMac; }
			set {
				if (_recordset.IntelMac != value) {
					_recordset.IntelMac = value;
					NotifyPropertyChanged("IntelMac");
				}
			}
		}

		public virtual bool? PowerPCMac {
			get { return _recordset.PowerPCMac; }
			set {
				if (_recordset.PowerPCMac != value) {
					_recordset.PowerPCMac = value;
					NotifyPropertyChanged("PowerPCMac");
				}
			}
		}

		public virtual bool? WindowsXP {
			get { return _recordset.WindowsXP; }
			set {
				if (_recordset.WindowsXP != value) {
					_recordset.WindowsXP = value;
					NotifyPropertyChanged("WindowsXP");
				}
			}
		}

		public virtual bool? WindowsVista {
			get { return _recordset.WindowsVista; }
			set {
				if (_recordset.WindowsVista != value) {
					_recordset.WindowsVista = value;
					NotifyPropertyChanged("WindowsVista");
				}
			}
		}

		public virtual bool? Windows7 {
			get { return _recordset.Windows7; }
			set {
				if (_recordset.Windows7 != value) {
					_recordset.Windows7 = value;
					NotifyPropertyChanged("Windows7");
				}
			}
		}

		public virtual bool? Linux {
			get { return _recordset.Linux; }
			set {
				if (_recordset.Linux != value) {
					_recordset.Linux = value;
					NotifyPropertyChanged("Linux");
				}
			}
		}

		public virtual bool? Unix {
			get { return _recordset.Unix; }
			set {
				if (_recordset.Unix != value) {
					_recordset.Unix = value;
					NotifyPropertyChanged("Unix");
				}
			}
		}

		public virtual bool? WindowsMobile {
			get { return _recordset.WindowsMobile; }
			set {
				if (_recordset.WindowsMobile != value) {
					_recordset.WindowsMobile = value;
					NotifyPropertyChanged("WindowsMobile");
				}
			}
		}

		public virtual bool? iPhone {
			get { return _recordset.iPhone; }
			set {
				if (_recordset.iPhone != value) {
					_recordset.iPhone = value;
					NotifyPropertyChanged("iPhone");
				}
			}
		}

		public virtual bool? ScreenReader {
			get { return _recordset.ScreenReader; }
			set {
				if (_recordset.ScreenReader != value) {
					_recordset.ScreenReader = value;
					NotifyPropertyChanged("ScreenReader");
				}
			}
		}

		public virtual bool? RequiresSilverlight {
			get { return _recordset.RequiresSilverlight; }
			set {
				if (_recordset.RequiresSilverlight != value) {
					_recordset.RequiresSilverlight = value;
					NotifyPropertyChanged("RequiresSilverlight");
				}
			}
		}

		public virtual bool? RequiresFlash {
			get { return _recordset.RequiresFlash; }
			set {
				if (_recordset.RequiresFlash != value) {
					_recordset.RequiresFlash = value;
					NotifyPropertyChanged("RequiresFlash");
				}
			}
		}

		public virtual bool? RequiresDotNet {
			get { return _recordset.RequiresDotNet; }
			set {
				if (_recordset.RequiresDotNet != value) {
					_recordset.RequiresDotNet = value;
					NotifyPropertyChanged("RequiresDotNet");
				}
			}
		}

		public virtual string DotNetVersion {
			get { return _recordset.DotNetVersion; }
			set {
				if (_recordset.DotNetVersion != value) {
					_recordset.DotNetVersion = value;
					NotifyPropertyChanged("DotNetVersion");
				}
			}
		}

		public virtual bool? RequiresMono {
			get { return _recordset.RequiresMono; }
			set {
				if (_recordset.RequiresMono != value) {
					_recordset.RequiresMono = value;
					NotifyPropertyChanged("RequiresMono");
				}
			}
		}

		public virtual bool? RequiresMoonlight {
			get { return _recordset.RequiresMoonlight; }
			set {
				if (_recordset.RequiresMoonlight != value) {
					_recordset.RequiresMoonlight = value;
					NotifyPropertyChanged("RequiresMoonlight");
				}
			}
		}


        /// <summary>
        /// Current recordset.
        /// </summary>
        public virtual Textfyre.TextfyreWeb.BusinessLayer.DownloadRecordset Recordset { 
            get { return _recordset; } 
            set { _recordset = value; } 
        } 
        
        /// <summary>
        /// Flag that identifies a modified record.
        /// </summary>
        public virtual bool IsDirty { 
            get { return _recordset.IsDirty; } 
            set { _recordset.IsDirty = value; } 
        } 

        /// <summary>
        /// Instance of DataBase class to enable data layer execution.
        /// </summary>
        protected Textfyre.TextfyreWeb.DataLayer.DownloadData DataFactory { 
            get {
                if (_dataFactory == null)
                    _dataFactory = new DownloadData();
                return _dataFactory;
            } 
        }

        /// <summary>
        /// Collection of records.
        /// </summary>
        public Textfyre.TextfyreWeb.BusinessLayer.DownloadCollection Items {
            get {
                if (_items == null)
                    _items = new Textfyre.TextfyreWeb.BusinessLayer.DownloadCollection();
                return _items;
            }
            set {
                _items = value;
            }
        }

        /// <summary>
        /// Collection of recordsets.
        /// </summary>
        public List<Textfyre.TextfyreWeb.BusinessLayer.DownloadRecordset> ItemsData {
            get {
                List<Textfyre.TextfyreWeb.BusinessLayer.DownloadRecordset> recs = new List<Textfyre.TextfyreWeb.BusinessLayer.DownloadRecordset>();
                foreach(Textfyre.TextfyreWeb.BusinessLayer.Download entity in Items) {
                    recs.Add((Textfyre.TextfyreWeb.BusinessLayer.DownloadRecordset)entity.Recordset.Clone());
                }

                return recs;
            }
        }
        #endregion

        #region Sorting Delegates
        /// <summary>
        /// Internal class containing sorting delegates.
        /// </summary>
        public class SortBy
        {
			public static Comparison<Download> DownloadIdColumnASC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<Int32>(o1.DownloadId, o2.DownloadId);
					};

			public static Comparison<Download> DownloadIdColumnDESC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<Int32>(o2.DownloadId, o1.DownloadId);
					};

			public static Comparison<Download> ProductIdColumnASC =
				delegate(Download o1, Download o2)
				{
					return o1.ProductId.CompareTo(o2.ProductId);
				};

			public static Comparison<Download> ProductIdColumnDESC =
				delegate(Download o1, Download o2)
				{
					return o2.ProductId.CompareTo(o1.ProductId);
				};

			public static Comparison<Download> PlatformIdColumnASC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<Int32>(o1.PlatformId, o2.PlatformId);
					};

			public static Comparison<Download> PlatformIdColumnDESC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<Int32>(o2.PlatformId, o1.PlatformId);
					};

			public static Comparison<Download> VersionColumnASC =
				delegate(Download o1, Download o2)
				{
					return o1.Version.CompareTo(o2.Version);
				};

			public static Comparison<Download> VersionColumnDESC =
				delegate(Download o1, Download o2)
				{
					return o2.Version.CompareTo(o1.Version);
				};

			public static Comparison<Download> AvailableDateColumnASC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<DateTime>(o1.AvailableDate, o2.AvailableDate);
					};

			public static Comparison<Download> AvailableDateColumnDESC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<DateTime>(o2.AvailableDate, o1.AvailableDate);
					};

			public static Comparison<Download> FilenameColumnASC =
				delegate(Download o1, Download o2)
				{
					return o1.Filename.CompareTo(o2.Filename);
				};

			public static Comparison<Download> FilenameColumnDESC =
				delegate(Download o1, Download o2)
				{
					return o2.Filename.CompareTo(o1.Filename);
				};

			public static Comparison<Download> IsLockedColumnASC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o1.IsLocked, o2.IsLocked);
					};

			public static Comparison<Download> IsLockedColumnDESC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o2.IsLocked, o1.IsLocked);
					};

			public static Comparison<Download> IntelMacColumnASC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o1.IntelMac, o2.IntelMac);
					};

			public static Comparison<Download> IntelMacColumnDESC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o2.IntelMac, o1.IntelMac);
					};

			public static Comparison<Download> PowerPCMacColumnASC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o1.PowerPCMac, o2.PowerPCMac);
					};

			public static Comparison<Download> PowerPCMacColumnDESC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o2.PowerPCMac, o1.PowerPCMac);
					};

			public static Comparison<Download> WindowsXPColumnASC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o1.WindowsXP, o2.WindowsXP);
					};

			public static Comparison<Download> WindowsXPColumnDESC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o2.WindowsXP, o1.WindowsXP);
					};

			public static Comparison<Download> WindowsVistaColumnASC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o1.WindowsVista, o2.WindowsVista);
					};

			public static Comparison<Download> WindowsVistaColumnDESC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o2.WindowsVista, o1.WindowsVista);
					};

			public static Comparison<Download> Windows7ColumnASC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o1.Windows7, o2.Windows7);
					};

			public static Comparison<Download> Windows7ColumnDESC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o2.Windows7, o1.Windows7);
					};

			public static Comparison<Download> LinuxColumnASC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o1.Linux, o2.Linux);
					};

			public static Comparison<Download> LinuxColumnDESC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o2.Linux, o1.Linux);
					};

			public static Comparison<Download> UnixColumnASC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o1.Unix, o2.Unix);
					};

			public static Comparison<Download> UnixColumnDESC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o2.Unix, o1.Unix);
					};

			public static Comparison<Download> WindowsMobileColumnASC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o1.WindowsMobile, o2.WindowsMobile);
					};

			public static Comparison<Download> WindowsMobileColumnDESC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o2.WindowsMobile, o1.WindowsMobile);
					};

			public static Comparison<Download> iPhoneColumnASC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o1.iPhone, o2.iPhone);
					};

			public static Comparison<Download> iPhoneColumnDESC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o2.iPhone, o1.iPhone);
					};

			public static Comparison<Download> ScreenReaderColumnASC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o1.ScreenReader, o2.ScreenReader);
					};

			public static Comparison<Download> ScreenReaderColumnDESC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o2.ScreenReader, o1.ScreenReader);
					};

			public static Comparison<Download> RequiresSilverlightColumnASC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o1.RequiresSilverlight, o2.RequiresSilverlight);
					};

			public static Comparison<Download> RequiresSilverlightColumnDESC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o2.RequiresSilverlight, o1.RequiresSilverlight);
					};

			public static Comparison<Download> RequiresFlashColumnASC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o1.RequiresFlash, o2.RequiresFlash);
					};

			public static Comparison<Download> RequiresFlashColumnDESC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o2.RequiresFlash, o1.RequiresFlash);
					};

			public static Comparison<Download> RequiresDotNetColumnASC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o1.RequiresDotNet, o2.RequiresDotNet);
					};

			public static Comparison<Download> RequiresDotNetColumnDESC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o2.RequiresDotNet, o1.RequiresDotNet);
					};

			public static Comparison<Download> DotNetVersionColumnASC =
				delegate(Download o1, Download o2)
				{
					return o1.DotNetVersion.CompareTo(o2.DotNetVersion);
				};

			public static Comparison<Download> DotNetVersionColumnDESC =
				delegate(Download o1, Download o2)
				{
					return o2.DotNetVersion.CompareTo(o1.DotNetVersion);
				};

			public static Comparison<Download> RequiresMonoColumnASC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o1.RequiresMono, o2.RequiresMono);
					};

			public static Comparison<Download> RequiresMonoColumnDESC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o2.RequiresMono, o1.RequiresMono);
					};

			public static Comparison<Download> RequiresMoonlightColumnASC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o1.RequiresMoonlight, o2.RequiresMoonlight);
					};

			public static Comparison<Download> RequiresMoonlightColumnDESC =
					delegate(Download o1, Download o2)
					{
						return Nullable.Compare<bool>(o2.RequiresMoonlight, o1.RequiresMoonlight);
					};


        }

        #endregion
    } 
} 