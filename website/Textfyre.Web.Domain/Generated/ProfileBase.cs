/*
 *  DO NOT EDIT THIS CLASS.
 * 
 *  This class is generated by a tool and should not be edited. If you need to change the functionality of 
 *  this class, you should discuss your changes with the team and they should be implemented in the
 *  appropriate template.
 *  
 */
using System; 
using System.Data; 
using System.Data.SqlClient;
using System.Collections.Generic;
using System.ComponentModel;
using Textfyre.TextfyreWeb.DataLayer;

namespace Textfyre.TextfyreWeb.BusinessLayer { 
    
    /// <summary>
    /// Base Profile domain class. This class is generated for each build and should never be modified
    /// directly. To change the functionality, the domainBase.cs template should be modified and related code
    /// generations tested.
    /// </summary>
    [Serializable()]
    public abstract class ProfileBase : INotifyPropertyChanged {

        #region Members
        /// <summary>
        /// Internal items collection for the Profile domain class.
        /// </summary>
        private Textfyre.TextfyreWeb.BusinessLayer.ProfileCollection _items = new ProfileCollection();
        /// <summary>
        /// Internal recordset for the Profile domain class.
        /// </summary>
        private Textfyre.TextfyreWeb.BusinessLayer.ProfileRecordset _recordset = new ProfileRecordset();

        /// <summary>
        /// Non-serialized instance of the Profile data layer class.
        /// </summary>
        [NonSerialized]
        private Textfyre.TextfyreWeb.DataLayer.ProfileData _dataFactory;

        /// <summary>
        /// String constant containing 'Profile'.
        /// </summary>
        private const string TABLE_NAME = "Profile";

        /// <summary>
        /// Property Changed event definition.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Notify Property changed event handler.
        /// </summary>
        private void NotifyPropertyChanged(String info) {
            if (PropertyChanged != null) {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }

        #endregion
        
        #region Constructors
        /// <summary> 
        /// Empty default constructor. 
        /// </summary> 
        public ProfileBase() {
            _dataFactory = new ProfileData();
        }

        public ProfileBase(Guid UserId) : this() {
				Load(UserId);
		}                     
        
        /// <summary> 
        /// Recordset constructor. 
        /// </summary> 
        public ProfileBase(Textfyre.TextfyreWeb.BusinessLayer.ProfileRecordset Recordset) : this() {             
            _recordset = Recordset; 
            _recordset.IsDirty = false; 
        }
        #endregion 
        
        #region Methods
        
        /// <summary>
        /// Load method that retrieves a record from the Profile table by the primary key id.
        /// </summary>
        public Textfyre.TextfyreWeb.BusinessLayer.ProfileRecordset Load(Guid UserId) {
            _recordset = DataFactory.GetProfileById(UserId);
            return _recordset;
        }

        /// <summary>
        /// LoadAll function that will load all records from the Profile table.
        /// </summary>
        public Textfyre.TextfyreWeb.BusinessLayer.ProfileCollection LoadAll() {
            Fill(DataFactory.GetAllProfile());
            return _items;
        }

        /// <summary>
        /// Mark a record for deletion. Record is not physically deleted until .Save() is called.
        /// </summary>
        public virtual void Delete() {
            _recordset.IsDeleted = true;
        }

        /// <summary>
        /// Delete a record and commit the deletion to the database.
        /// </summary>
        public virtual void DeleteNow() {
            _recordset.IsDeleted = true;
            Save();
        }

        /// <summary>
        /// Overload for calling save without concern for the new primary key on insert.
        /// </summary>
        public virtual int Save() {
            Guid newPrimaryKey;
            return Save(out newPrimaryKey);
        }

        /// <summary>
        /// Save the current record to the database.
        /// </summary>
        public virtual int Save(out Guid newPrimaryKey)
        {
            int ReturnValue = -1;
            newPrimaryKey = Guid.Empty;
            
            if (_recordset.IsDeleted) {
                ReturnValue = DataFactory.DeleteProfile(_recordset.UserId);                
            } else {
                if (_recordset.UserId == Guid.Empty) {
                    newPrimaryKey = _dataFactory.InsertProfile(_recordset);
					if (newPrimaryKey != Guid.Empty)
						ReturnValue = -1;
					else
						ReturnValue = 0;;                    
                } else {
                    if(_recordset.IsDirty) {    
                        ReturnValue = DataFactory.UpdateProfile(_recordset);                        
                    }
                }

                _recordset.IsDirty = false;
            }

            if (DataFactory.CacheManager != null) {
                string cacheKey = DataFactory.CacheManager.CreateCacheKey(TABLE_NAME, null);
                DataFactory.CacheManager.Remove2(cacheKey);
            }

            return ReturnValue;
        }


        /// <summary>
        /// Fill a collection of recordsets from the data layer list.
        /// </summary>
        protected void Fill(List<Textfyre.TextfyreWeb.BusinessLayer.ProfileRecordset> recs) {
            Items.Fill(recs);
            _items.IsCollectionDirty = false;
        }
        #endregion

        #region Properties


		public virtual Guid UserId {
			get { return _recordset.UserId; }
			set {
				if (_recordset.UserId != value) {
					_recordset.UserId = value;
					NotifyPropertyChanged("UserId");
				}
			}
		}

		public virtual string FirstName {
			get { return _recordset.FirstName; }
			set {
				if (_recordset.FirstName != value) {
					_recordset.FirstName = value;
					NotifyPropertyChanged("FirstName");
				}
			}
		}

		public virtual string LastName {
			get { return _recordset.LastName; }
			set {
				if (_recordset.LastName != value) {
					_recordset.LastName = value;
					NotifyPropertyChanged("LastName");
				}
			}
		}

		public virtual string City {
			get { return _recordset.City; }
			set {
				if (_recordset.City != value) {
					_recordset.City = value;
					NotifyPropertyChanged("City");
				}
			}
		}

		public virtual string State {
			get { return _recordset.State; }
			set {
				if (_recordset.State != value) {
					_recordset.State = value;
					NotifyPropertyChanged("State");
				}
			}
		}

		public virtual string School {
			get { return _recordset.School; }
			set {
				if (_recordset.School != value) {
					_recordset.School = value;
					NotifyPropertyChanged("School");
				}
			}
		}

		public virtual bool? IsCustomer {
			get { return _recordset.IsCustomer; }
			set {
				if (_recordset.IsCustomer != value) {
					_recordset.IsCustomer = value;
					NotifyPropertyChanged("IsCustomer");
				}
			}
		}

		public virtual bool? OwnsSecretLetter {
			get { return _recordset.OwnsSecretLetter; }
			set {
				if (_recordset.OwnsSecretLetter != value) {
					_recordset.OwnsSecretLetter = value;
					NotifyPropertyChanged("OwnsSecretLetter");
				}
			}
		}

		public virtual bool? OwnsShadow {
			get { return _recordset.OwnsShadow; }
			set {
				if (_recordset.OwnsShadow != value) {
					_recordset.OwnsShadow = value;
					NotifyPropertyChanged("OwnsShadow");
				}
			}
		}

		public virtual bool? OwnsEmpathy {
			get { return _recordset.OwnsEmpathy; }
			set {
				if (_recordset.OwnsEmpathy != value) {
					_recordset.OwnsEmpathy = value;
					NotifyPropertyChanged("OwnsEmpathy");
				}
			}
		}

		public virtual string ValidationId {
			get { return _recordset.ValidationId; }
			set {
				if (_recordset.ValidationId != value) {
					_recordset.ValidationId = value;
					NotifyPropertyChanged("ValidationId");
				}
			}
		}

		public virtual DateTime LastActivityDate {
			get { return _recordset.LastActivityDate; }
			set {
				if (_recordset.LastActivityDate != value) {
					_recordset.LastActivityDate = value;
					NotifyPropertyChanged("LastActivityDate");
				}
			}
		}


        /// <summary>
        /// Current recordset.
        /// </summary>
        public virtual Textfyre.TextfyreWeb.BusinessLayer.ProfileRecordset Recordset { 
            get { return _recordset; } 
            set { _recordset = value; } 
        } 
        
        /// <summary>
        /// Flag that identifies a modified record.
        /// </summary>
        public virtual bool IsDirty { 
            get { return _recordset.IsDirty; } 
            set { _recordset.IsDirty = value; } 
        } 

        /// <summary>
        /// Instance of DataBase class to enable data layer execution.
        /// </summary>
        protected Textfyre.TextfyreWeb.DataLayer.ProfileData DataFactory { 
            get {
                if (_dataFactory == null)
                    _dataFactory = new ProfileData();
                return _dataFactory;
            } 
        }

        /// <summary>
        /// Collection of records.
        /// </summary>
        public Textfyre.TextfyreWeb.BusinessLayer.ProfileCollection Items {
            get {
                if (_items == null)
                    _items = new Textfyre.TextfyreWeb.BusinessLayer.ProfileCollection();
                return _items;
            }
            set {
                _items = value;
            }
        }

        /// <summary>
        /// Collection of recordsets.
        /// </summary>
        public List<Textfyre.TextfyreWeb.BusinessLayer.ProfileRecordset> ItemsData {
            get {
                List<Textfyre.TextfyreWeb.BusinessLayer.ProfileRecordset> recs = new List<Textfyre.TextfyreWeb.BusinessLayer.ProfileRecordset>();
                foreach(Textfyre.TextfyreWeb.BusinessLayer.Profile entity in Items) {
                    recs.Add((Textfyre.TextfyreWeb.BusinessLayer.ProfileRecordset)entity.Recordset.Clone());
                }

                return recs;
            }
        }
        #endregion

        #region Sorting Delegates
        /// <summary>
        /// Internal class containing sorting delegates.
        /// </summary>
        public class SortBy
        {
			public static Comparison<Profile> UserIdColumnASC =
				delegate(Profile o1, Profile o2)
				{
					return o1.UserId.CompareTo(o2.UserId);
				};

			public static Comparison<Profile> UserIdColumnDESC =
				delegate(Profile o1, Profile o2)
				{
					return o2.UserId.CompareTo(o1.UserId);
				};

			public static Comparison<Profile> FirstNameColumnASC =
				delegate(Profile o1, Profile o2)
				{
					return o1.FirstName.CompareTo(o2.FirstName);
				};

			public static Comparison<Profile> FirstNameColumnDESC =
				delegate(Profile o1, Profile o2)
				{
					return o2.FirstName.CompareTo(o1.FirstName);
				};

			public static Comparison<Profile> LastNameColumnASC =
				delegate(Profile o1, Profile o2)
				{
					return o1.LastName.CompareTo(o2.LastName);
				};

			public static Comparison<Profile> LastNameColumnDESC =
				delegate(Profile o1, Profile o2)
				{
					return o2.LastName.CompareTo(o1.LastName);
				};

			public static Comparison<Profile> CityColumnASC =
				delegate(Profile o1, Profile o2)
				{
					return o1.City.CompareTo(o2.City);
				};

			public static Comparison<Profile> CityColumnDESC =
				delegate(Profile o1, Profile o2)
				{
					return o2.City.CompareTo(o1.City);
				};

			public static Comparison<Profile> StateColumnASC =
				delegate(Profile o1, Profile o2)
				{
					return o1.State.CompareTo(o2.State);
				};

			public static Comparison<Profile> StateColumnDESC =
				delegate(Profile o1, Profile o2)
				{
					return o2.State.CompareTo(o1.State);
				};

			public static Comparison<Profile> SchoolColumnASC =
				delegate(Profile o1, Profile o2)
				{
					return o1.School.CompareTo(o2.School);
				};

			public static Comparison<Profile> SchoolColumnDESC =
				delegate(Profile o1, Profile o2)
				{
					return o2.School.CompareTo(o1.School);
				};

			public static Comparison<Profile> IsCustomerColumnASC =
					delegate(Profile o1, Profile o2)
					{
						return Nullable.Compare<bool>(o1.IsCustomer, o2.IsCustomer);
					};

			public static Comparison<Profile> IsCustomerColumnDESC =
					delegate(Profile o1, Profile o2)
					{
						return Nullable.Compare<bool>(o2.IsCustomer, o1.IsCustomer);
					};

			public static Comparison<Profile> OwnsSecretLetterColumnASC =
					delegate(Profile o1, Profile o2)
					{
						return Nullable.Compare<bool>(o1.OwnsSecretLetter, o2.OwnsSecretLetter);
					};

			public static Comparison<Profile> OwnsSecretLetterColumnDESC =
					delegate(Profile o1, Profile o2)
					{
						return Nullable.Compare<bool>(o2.OwnsSecretLetter, o1.OwnsSecretLetter);
					};

			public static Comparison<Profile> OwnsShadowColumnASC =
					delegate(Profile o1, Profile o2)
					{
						return Nullable.Compare<bool>(o1.OwnsShadow, o2.OwnsShadow);
					};

			public static Comparison<Profile> OwnsShadowColumnDESC =
					delegate(Profile o1, Profile o2)
					{
						return Nullable.Compare<bool>(o2.OwnsShadow, o1.OwnsShadow);
					};

			public static Comparison<Profile> OwnsEmpathyColumnASC =
					delegate(Profile o1, Profile o2)
					{
						return Nullable.Compare<bool>(o1.OwnsEmpathy, o2.OwnsEmpathy);
					};

			public static Comparison<Profile> OwnsEmpathyColumnDESC =
					delegate(Profile o1, Profile o2)
					{
						return Nullable.Compare<bool>(o2.OwnsEmpathy, o1.OwnsEmpathy);
					};

			public static Comparison<Profile> ValidationIdColumnASC =
				delegate(Profile o1, Profile o2)
				{
					return o1.ValidationId.CompareTo(o2.ValidationId);
				};

			public static Comparison<Profile> ValidationIdColumnDESC =
				delegate(Profile o1, Profile o2)
				{
					return o2.ValidationId.CompareTo(o1.ValidationId);
				};

			public static Comparison<Profile> LastActivityDateColumnASC =
				delegate(Profile o1, Profile o2)
				{
					return o1.LastActivityDate.CompareTo(o2.LastActivityDate);
				};

			public static Comparison<Profile> LastActivityDateColumnDESC =
				delegate(Profile o1, Profile o2)
				{
					return o2.LastActivityDate.CompareTo(o1.LastActivityDate);
				};


        }

        #endregion
    } 
} 