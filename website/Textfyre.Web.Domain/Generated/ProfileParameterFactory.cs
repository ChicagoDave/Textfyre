/*
 *  DO NOT EDIT THIS CLASS.
 * 
 *  This class is generated by a tool and should not be edited. If you need to change the functionality of 
 *  this class, you should discuss your changes with the team and they should be implemented in the
 *  appropriate template.
 *  
 */
using System;
using System.Data;
using System.Data.SqlClient;

namespace Textfyre.TextfyreWeb.DataLayer { 
    /// <summary>
    /// Factory class that auto-builds SqlParameters.
    /// </summary>
    [Serializable()]
    public class ProfileParameterFactory {
        /// <summary>
        /// GetParameter method returns a SqlParameter.
        /// </summary>
        public SqlParameter GetParameter(Textfyre.TextfyreWeb.DataLayer.ProfileFields FieldIdentity, object FieldValue) { 
            SqlParameter param = null;
            switch (FieldIdentity) {
				case ProfileFields.UserId:
					param = new SqlParameter("@UserId", SqlDbType.UniqueIdentifier);
					param.Value = FieldValue;
					param.Direction = ParameterDirection.Input;
					param.IsNullable = false;
					param.SourceColumn = "UserId";
					break;
				case ProfileFields.FirstName:
					param = new SqlParameter("@FirstName", SqlDbType.NVarChar, 50);
					param.Value = FieldValue;
					param.Direction = ParameterDirection.Input;
					param.IsNullable = true;
					param.SourceColumn = "FirstName";
					break;
				case ProfileFields.LastName:
					param = new SqlParameter("@LastName", SqlDbType.NVarChar, 50);
					param.Value = FieldValue;
					param.Direction = ParameterDirection.Input;
					param.IsNullable = true;
					param.SourceColumn = "LastName";
					break;
				case ProfileFields.City:
					param = new SqlParameter("@City", SqlDbType.NVarChar, 50);
					param.Value = FieldValue;
					param.Direction = ParameterDirection.Input;
					param.IsNullable = true;
					param.SourceColumn = "City";
					break;
				case ProfileFields.State:
					param = new SqlParameter("@State", SqlDbType.Char, 2);
					param.Value = FieldValue;
					param.Direction = ParameterDirection.Input;
					param.IsNullable = true;
					param.SourceColumn = "State";
					break;
				case ProfileFields.School:
					param = new SqlParameter("@School", SqlDbType.NVarChar, 100);
					param.Value = FieldValue;
					param.Direction = ParameterDirection.Input;
					param.IsNullable = true;
					param.SourceColumn = "School";
					break;
				case ProfileFields.IsCustomer:
					param = new SqlParameter("@IsCustomer", SqlDbType.Bit);
					param.Value = FieldValue;
					param.Direction = ParameterDirection.Input;
					param.IsNullable = true;
					param.SourceColumn = "IsCustomer";
					break;
				case ProfileFields.OwnsSecretLetter:
					param = new SqlParameter("@OwnsSecretLetter", SqlDbType.Bit);
					param.Value = FieldValue;
					param.Direction = ParameterDirection.Input;
					param.IsNullable = true;
					param.SourceColumn = "OwnsSecretLetter";
					break;
				case ProfileFields.OwnsShadow:
					param = new SqlParameter("@OwnsShadow", SqlDbType.Bit);
					param.Value = FieldValue;
					param.Direction = ParameterDirection.Input;
					param.IsNullable = true;
					param.SourceColumn = "OwnsShadow";
					break;
				case ProfileFields.OwnsEmpathy:
					param = new SqlParameter("@OwnsEmpathy", SqlDbType.Bit);
					param.Value = FieldValue;
					param.Direction = ParameterDirection.Input;
					param.IsNullable = true;
					param.SourceColumn = "OwnsEmpathy";
					break;
				case ProfileFields.ValidationId:
					param = new SqlParameter("@ValidationId", SqlDbType.NVarChar, 50);
					param.Value = FieldValue;
					param.Direction = ParameterDirection.Input;
					param.IsNullable = true;
					param.SourceColumn = "ValidationId";
					break;
				case ProfileFields.LastActivityDate:
					param = new SqlParameter("@LastActivityDate", SqlDbType.DateTime);
					param.Value = FieldValue;
					param.Direction = ParameterDirection.Input;
					param.IsNullable = false;
					param.SourceColumn = "LastActivityDate";
					break;
            }

            if(param == null)
                throw new Exception("Unknown parameter identifier.");

            return param;
        }
    }
}