/*
 *  DO NOT EDIT THIS CLASS.
 * 
 *  This class is generated by a tool and should not be edited. If you need to change the functionality of 
 *  this class, you should discuss your changes with the team and they should be implemented in the
 *  appropriate template.
 *  
 */
using System; 
using System.Data; 
using System.Data.SqlClient;
using System.Collections.Generic;
using System.ComponentModel;
using Textfyre.TextfyreWeb.DataLayer;

namespace Textfyre.TextfyreWeb.BusinessLayer { 
    
    /// <summary>
    /// Base Transaction domain class. This class is generated for each build and should never be modified
    /// directly. To change the functionality, the domainBase.cs template should be modified and related code
    /// generations tested.
    /// </summary>
    [Serializable()]
    public abstract class TransactionBase : INotifyPropertyChanged {

        #region Members
        /// <summary>
        /// Internal items collection for the Transaction domain class.
        /// </summary>
        private Textfyre.TextfyreWeb.BusinessLayer.TransactionCollection _items = new TransactionCollection();
        /// <summary>
        /// Internal recordset for the Transaction domain class.
        /// </summary>
        private Textfyre.TextfyreWeb.BusinessLayer.TransactionRecordset _recordset = new TransactionRecordset();

        /// <summary>
        /// Non-serialized instance of the Transaction data layer class.
        /// </summary>
        [NonSerialized]
        private Textfyre.TextfyreWeb.DataLayer.TransactionData _dataFactory;

        /// <summary>
        /// String constant containing 'Transaction'.
        /// </summary>
        private const string TABLE_NAME = "Transaction";

        /// <summary>
        /// Property Changed event definition.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Notify Property changed event handler.
        /// </summary>
        private void NotifyPropertyChanged(String info) {
            if (PropertyChanged != null) {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }

        #endregion
        
        #region Constructors
        /// <summary> 
        /// Empty default constructor. 
        /// </summary> 
        public TransactionBase() {
            _dataFactory = new TransactionData();
        }

        public TransactionBase(Int32 TransactionId) : this() {
				Load(TransactionId);
		}                     
        
        /// <summary> 
        /// Recordset constructor. 
        /// </summary> 
        public TransactionBase(Textfyre.TextfyreWeb.BusinessLayer.TransactionRecordset Recordset) : this() {             
            _recordset = Recordset; 
            _recordset.IsDirty = false; 
        }
        #endregion 
        
        #region Methods
        
        /// <summary>
        /// Load method that retrieves a record from the Transaction table by the primary key id.
        /// </summary>
        public Textfyre.TextfyreWeb.BusinessLayer.TransactionRecordset Load(Int32 TransactionId) {
            _recordset = DataFactory.GetTransactionById(TransactionId);
            return _recordset;
        }

        /// <summary>
        /// LoadAll function that will load all records from the Transaction table.
        /// </summary>
        public Textfyre.TextfyreWeb.BusinessLayer.TransactionCollection LoadAll() {
            Fill(DataFactory.GetAllTransaction());
            return _items;
        }

        /// <summary>
        /// Mark a record for deletion. Record is not physically deleted until .Save() is called.
        /// </summary>
        public virtual void Delete() {
            _recordset.IsDeleted = true;
        }

        /// <summary>
        /// Delete a record and commit the deletion to the database.
        /// </summary>
        public virtual void DeleteNow() {
            _recordset.IsDeleted = true;
            Save();
        }

        /// <summary>
        /// Overload for calling save without concern for the new primary key on insert.
        /// </summary>
        public virtual int Save() {
            Int32 newPrimaryKey;
            return Save(out newPrimaryKey);
        }

        /// <summary>
        /// Save the current record to the database.
        /// </summary>
        public virtual int Save(out Int32 newPrimaryKey)
        {
            int ReturnValue = -1;
            newPrimaryKey = -1;
            
            if (_recordset.IsDeleted) {
                ReturnValue = DataFactory.DeleteTransaction(_recordset.TransactionId);                
            } else {
                if (_recordset.TransactionId == -1) {
                    newPrimaryKey = _dataFactory.InsertTransaction(_recordset);
					if (newPrimaryKey != -1)
						ReturnValue = -1;
					else
						ReturnValue = 0;;                    
                } else {
                    if(_recordset.IsDirty) {    
                        ReturnValue = DataFactory.UpdateTransaction(_recordset);                        
                    }
                }

                _recordset.IsDirty = false;
            }

            if (DataFactory.CacheManager != null) {
                string cacheKey = DataFactory.CacheManager.CreateCacheKey(TABLE_NAME, null);
                DataFactory.CacheManager.Remove2(cacheKey);
            }

            return ReturnValue;
        }


        /// <summary>
        /// Fill a collection of recordsets from the data layer list.
        /// </summary>
        protected void Fill(List<Textfyre.TextfyreWeb.BusinessLayer.TransactionRecordset> recs) {
            Items.Fill(recs);
            _items.IsCollectionDirty = false;
        }
        #endregion

        #region Properties


		public virtual Int32 TransactionId {
			get { return _recordset.TransactionId; }
			set {
				if (_recordset.TransactionId != value) {
					_recordset.TransactionId = value;
					NotifyPropertyChanged("TransactionId");
				}
			}
		}

		public virtual string PayerEmail {
			get { return _recordset.PayerEmail; }
			set {
				if (_recordset.PayerEmail != value) {
					_recordset.PayerEmail = value;
					NotifyPropertyChanged("PayerEmail");
				}
			}
		}

		public virtual string EJTransactionId {
			get { return _recordset.EJTransactionId; }
			set {
				if (_recordset.EJTransactionId != value) {
					_recordset.EJTransactionId = value;
					NotifyPropertyChanged("EJTransactionId");
				}
			}
		}

		public virtual string FirstName {
			get { return _recordset.FirstName; }
			set {
				if (_recordset.FirstName != value) {
					_recordset.FirstName = value;
					NotifyPropertyChanged("FirstName");
				}
			}
		}

		public virtual string LastName {
			get { return _recordset.LastName; }
			set {
				if (_recordset.LastName != value) {
					_recordset.LastName = value;
					NotifyPropertyChanged("LastName");
				}
			}
		}

		public virtual decimal? MCGross {
			get { return _recordset.MCGross; }
			set {
				if (_recordset.MCGross != value) {
					_recordset.MCGross = value;
					NotifyPropertyChanged("MCGross");
				}
			}
		}

		public virtual decimal? Shipping {
			get { return _recordset.Shipping; }
			set {
				if (_recordset.Shipping != value) {
					_recordset.Shipping = value;
					NotifyPropertyChanged("Shipping");
				}
			}
		}

		public virtual decimal? Tax {
			get { return _recordset.Tax; }
			set {
				if (_recordset.Tax != value) {
					_recordset.Tax = value;
					NotifyPropertyChanged("Tax");
				}
			}
		}

		public virtual string InvoiceId {
			get { return _recordset.InvoiceId; }
			set {
				if (_recordset.InvoiceId != value) {
					_recordset.InvoiceId = value;
					NotifyPropertyChanged("InvoiceId");
				}
			}
		}

		public virtual string Street {
			get { return _recordset.Street; }
			set {
				if (_recordset.Street != value) {
					_recordset.Street = value;
					NotifyPropertyChanged("Street");
				}
			}
		}

		public virtual string City {
			get { return _recordset.City; }
			set {
				if (_recordset.City != value) {
					_recordset.City = value;
					NotifyPropertyChanged("City");
				}
			}
		}

		public virtual string State {
			get { return _recordset.State; }
			set {
				if (_recordset.State != value) {
					_recordset.State = value;
					NotifyPropertyChanged("State");
				}
			}
		}

		public virtual string ZipCode {
			get { return _recordset.ZipCode; }
			set {
				if (_recordset.ZipCode != value) {
					_recordset.ZipCode = value;
					NotifyPropertyChanged("ZipCode");
				}
			}
		}

		public virtual string CountryCode {
			get { return _recordset.CountryCode; }
			set {
				if (_recordset.CountryCode != value) {
					_recordset.CountryCode = value;
					NotifyPropertyChanged("CountryCode");
				}
			}
		}

		public virtual string Phone {
			get { return _recordset.Phone; }
			set {
				if (_recordset.Phone != value) {
					_recordset.Phone = value;
					NotifyPropertyChanged("Phone");
				}
			}
		}

		public virtual string PayerPhone {
			get { return _recordset.PayerPhone; }
			set {
				if (_recordset.PayerPhone != value) {
					_recordset.PayerPhone = value;
					NotifyPropertyChanged("PayerPhone");
				}
			}
		}


        /// <summary>
        /// Current recordset.
        /// </summary>
        public virtual Textfyre.TextfyreWeb.BusinessLayer.TransactionRecordset Recordset { 
            get { return _recordset; } 
            set { _recordset = value; } 
        } 
        
        /// <summary>
        /// Flag that identifies a modified record.
        /// </summary>
        public virtual bool IsDirty { 
            get { return _recordset.IsDirty; } 
            set { _recordset.IsDirty = value; } 
        } 

        /// <summary>
        /// Instance of DataBase class to enable data layer execution.
        /// </summary>
        protected Textfyre.TextfyreWeb.DataLayer.TransactionData DataFactory { 
            get {
                if (_dataFactory == null)
                    _dataFactory = new TransactionData();
                return _dataFactory;
            } 
        }

        /// <summary>
        /// Collection of records.
        /// </summary>
        public Textfyre.TextfyreWeb.BusinessLayer.TransactionCollection Items {
            get {
                if (_items == null)
                    _items = new Textfyre.TextfyreWeb.BusinessLayer.TransactionCollection();
                return _items;
            }
            set {
                _items = value;
            }
        }

        /// <summary>
        /// Collection of recordsets.
        /// </summary>
        public List<Textfyre.TextfyreWeb.BusinessLayer.TransactionRecordset> ItemsData {
            get {
                List<Textfyre.TextfyreWeb.BusinessLayer.TransactionRecordset> recs = new List<Textfyre.TextfyreWeb.BusinessLayer.TransactionRecordset>();
                foreach(Textfyre.TextfyreWeb.BusinessLayer.Transaction entity in Items) {
                    recs.Add((Textfyre.TextfyreWeb.BusinessLayer.TransactionRecordset)entity.Recordset.Clone());
                }

                return recs;
            }
        }
        #endregion

        #region Sorting Delegates
        /// <summary>
        /// Internal class containing sorting delegates.
        /// </summary>
        public class SortBy
        {
			public static Comparison<Transaction> TransactionIdColumnASC =
					delegate(Transaction o1, Transaction o2)
					{
						return Nullable.Compare<Int32>(o1.TransactionId, o2.TransactionId);
					};

			public static Comparison<Transaction> TransactionIdColumnDESC =
					delegate(Transaction o1, Transaction o2)
					{
						return Nullable.Compare<Int32>(o2.TransactionId, o1.TransactionId);
					};

			public static Comparison<Transaction> PayerEmailColumnASC =
				delegate(Transaction o1, Transaction o2)
				{
					return o1.PayerEmail.CompareTo(o2.PayerEmail);
				};

			public static Comparison<Transaction> PayerEmailColumnDESC =
				delegate(Transaction o1, Transaction o2)
				{
					return o2.PayerEmail.CompareTo(o1.PayerEmail);
				};

			public static Comparison<Transaction> EJTransactionIdColumnASC =
				delegate(Transaction o1, Transaction o2)
				{
					return o1.EJTransactionId.CompareTo(o2.EJTransactionId);
				};

			public static Comparison<Transaction> EJTransactionIdColumnDESC =
				delegate(Transaction o1, Transaction o2)
				{
					return o2.EJTransactionId.CompareTo(o1.EJTransactionId);
				};

			public static Comparison<Transaction> FirstNameColumnASC =
				delegate(Transaction o1, Transaction o2)
				{
					return o1.FirstName.CompareTo(o2.FirstName);
				};

			public static Comparison<Transaction> FirstNameColumnDESC =
				delegate(Transaction o1, Transaction o2)
				{
					return o2.FirstName.CompareTo(o1.FirstName);
				};

			public static Comparison<Transaction> LastNameColumnASC =
				delegate(Transaction o1, Transaction o2)
				{
					return o1.LastName.CompareTo(o2.LastName);
				};

			public static Comparison<Transaction> LastNameColumnDESC =
				delegate(Transaction o1, Transaction o2)
				{
					return o2.LastName.CompareTo(o1.LastName);
				};

			public static Comparison<Transaction> MCGrossColumnASC =
					delegate(Transaction o1, Transaction o2)
					{
						return Nullable.Compare<decimal>(o1.MCGross, o2.MCGross);
					};

			public static Comparison<Transaction> MCGrossColumnDESC =
					delegate(Transaction o1, Transaction o2)
					{
						return Nullable.Compare<decimal>(o2.MCGross, o1.MCGross);
					};

			public static Comparison<Transaction> ShippingColumnASC =
					delegate(Transaction o1, Transaction o2)
					{
						return Nullable.Compare<decimal>(o1.Shipping, o2.Shipping);
					};

			public static Comparison<Transaction> ShippingColumnDESC =
					delegate(Transaction o1, Transaction o2)
					{
						return Nullable.Compare<decimal>(o2.Shipping, o1.Shipping);
					};

			public static Comparison<Transaction> TaxColumnASC =
					delegate(Transaction o1, Transaction o2)
					{
						return Nullable.Compare<decimal>(o1.Tax, o2.Tax);
					};

			public static Comparison<Transaction> TaxColumnDESC =
					delegate(Transaction o1, Transaction o2)
					{
						return Nullable.Compare<decimal>(o2.Tax, o1.Tax);
					};

			public static Comparison<Transaction> InvoiceIdColumnASC =
				delegate(Transaction o1, Transaction o2)
				{
					return o1.InvoiceId.CompareTo(o2.InvoiceId);
				};

			public static Comparison<Transaction> InvoiceIdColumnDESC =
				delegate(Transaction o1, Transaction o2)
				{
					return o2.InvoiceId.CompareTo(o1.InvoiceId);
				};

			public static Comparison<Transaction> StreetColumnASC =
				delegate(Transaction o1, Transaction o2)
				{
					return o1.Street.CompareTo(o2.Street);
				};

			public static Comparison<Transaction> StreetColumnDESC =
				delegate(Transaction o1, Transaction o2)
				{
					return o2.Street.CompareTo(o1.Street);
				};

			public static Comparison<Transaction> CityColumnASC =
				delegate(Transaction o1, Transaction o2)
				{
					return o1.City.CompareTo(o2.City);
				};

			public static Comparison<Transaction> CityColumnDESC =
				delegate(Transaction o1, Transaction o2)
				{
					return o2.City.CompareTo(o1.City);
				};

			public static Comparison<Transaction> StateColumnASC =
				delegate(Transaction o1, Transaction o2)
				{
					return o1.State.CompareTo(o2.State);
				};

			public static Comparison<Transaction> StateColumnDESC =
				delegate(Transaction o1, Transaction o2)
				{
					return o2.State.CompareTo(o1.State);
				};

			public static Comparison<Transaction> ZipCodeColumnASC =
				delegate(Transaction o1, Transaction o2)
				{
					return o1.ZipCode.CompareTo(o2.ZipCode);
				};

			public static Comparison<Transaction> ZipCodeColumnDESC =
				delegate(Transaction o1, Transaction o2)
				{
					return o2.ZipCode.CompareTo(o1.ZipCode);
				};

			public static Comparison<Transaction> CountryCodeColumnASC =
				delegate(Transaction o1, Transaction o2)
				{
					return o1.CountryCode.CompareTo(o2.CountryCode);
				};

			public static Comparison<Transaction> CountryCodeColumnDESC =
				delegate(Transaction o1, Transaction o2)
				{
					return o2.CountryCode.CompareTo(o1.CountryCode);
				};

			public static Comparison<Transaction> PhoneColumnASC =
				delegate(Transaction o1, Transaction o2)
				{
					return o1.Phone.CompareTo(o2.Phone);
				};

			public static Comparison<Transaction> PhoneColumnDESC =
				delegate(Transaction o1, Transaction o2)
				{
					return o2.Phone.CompareTo(o1.Phone);
				};

			public static Comparison<Transaction> PayerPhoneColumnASC =
				delegate(Transaction o1, Transaction o2)
				{
					return o1.PayerPhone.CompareTo(o2.PayerPhone);
				};

			public static Comparison<Transaction> PayerPhoneColumnDESC =
				delegate(Transaction o1, Transaction o2)
				{
					return o2.PayerPhone.CompareTo(o1.PayerPhone);
				};


        }

        #endregion
    } 
} 