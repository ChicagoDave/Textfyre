/*
 *  DO NOT EDIT THIS CLASS.
 * 
 *  This class is generated by a tool and should not be edited. If you need to change the functionality of 
 *  this class, you should discuss your changes with the team and they should be implemented in the
 *  appropriate template.
 *  
 */
using System;
using System.Data;
using System.Data.SqlClient;

namespace Textfyre.TextfyreWeb.DataLayer { 
    /// <summary>
    /// Factory class that auto-builds SqlParameters.
    /// </summary>
    [Serializable()]
    public class TransactionItemParameterFactory {
        /// <summary>
        /// GetParameter method returns a SqlParameter.
        /// </summary>
        public SqlParameter GetParameter(Textfyre.TextfyreWeb.DataLayer.TransactionItemFields FieldIdentity, object FieldValue) { 
            SqlParameter param = null;
            switch (FieldIdentity) {
				case TransactionItemFields.ItemId:
					param = new SqlParameter("@ItemId", SqlDbType.Int);
					param.Value = FieldValue;
					param.Direction = ParameterDirection.Input;
					param.IsNullable = false;
					param.SourceColumn = "ItemId";
					break;
				case TransactionItemFields.TransactionId:
					param = new SqlParameter("@TransactionId", SqlDbType.Int);
					param.Value = FieldValue;
					param.Direction = ParameterDirection.Input;
					param.IsNullable = false;
					param.SourceColumn = "TransactionId";
					break;
				case TransactionItemFields.Sequence:
					param = new SqlParameter("@Sequence", SqlDbType.TinyInt);
					param.Value = FieldValue;
					param.Direction = ParameterDirection.Input;
					param.IsNullable = true;
					param.SourceColumn = "Sequence";
					break;
				case TransactionItemFields.ItemName:
					param = new SqlParameter("@ItemName", SqlDbType.NVarChar, 200);
					param.Value = FieldValue;
					param.Direction = ParameterDirection.Input;
					param.IsNullable = true;
					param.SourceColumn = "ItemName";
					break;
				case TransactionItemFields.ItemNumber:
					param = new SqlParameter("@ItemNumber", SqlDbType.NVarChar, 50);
					param.Value = FieldValue;
					param.Direction = ParameterDirection.Input;
					param.IsNullable = true;
					param.SourceColumn = "ItemNumber";
					break;
				case TransactionItemFields.Quantity:
					param = new SqlParameter("@Quantity", SqlDbType.Int);
					param.Value = FieldValue;
					param.Direction = ParameterDirection.Input;
					param.IsNullable = true;
					param.SourceColumn = "Quantity";
					break;
				case TransactionItemFields.MCGross:
					param = new SqlParameter("@MCGross", SqlDbType.Money);
					param.Value = FieldValue;
					param.Direction = ParameterDirection.Input;
					param.IsNullable = true;
					param.SourceColumn = "MCGross";
					break;
				case TransactionItemFields.Option1:
					param = new SqlParameter("@Option1", SqlDbType.NVarChar, 200);
					param.Value = FieldValue;
					param.Direction = ParameterDirection.Input;
					param.IsNullable = true;
					param.SourceColumn = "Option1";
					break;
				case TransactionItemFields.Option2:
					param = new SqlParameter("@Option2", SqlDbType.NVarChar, 200);
					param.Value = FieldValue;
					param.Direction = ParameterDirection.Input;
					param.IsNullable = true;
					param.SourceColumn = "Option2";
					break;
				case TransactionItemFields.Option3:
					param = new SqlParameter("@Option3", SqlDbType.NVarChar, 200);
					param.Value = FieldValue;
					param.Direction = ParameterDirection.Input;
					param.IsNullable = true;
					param.SourceColumn = "Option3";
					break;
				case TransactionItemFields.SKU:
					param = new SqlParameter("@SKU", SqlDbType.NVarChar, 50);
					param.Value = FieldValue;
					param.Direction = ParameterDirection.Input;
					param.IsNullable = true;
					param.SourceColumn = "SKU";
					break;
            }

            if(param == null)
                throw new Exception("Unknown parameter identifier.");

            return param;
        }
    }
}