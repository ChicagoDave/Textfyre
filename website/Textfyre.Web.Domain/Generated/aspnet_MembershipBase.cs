/*
 *  DO NOT EDIT THIS CLASS.
 * 
 *  This class is generated by a tool and should not be edited. If you need to change the functionality of 
 *  this class, you should discuss your changes with the team and they should be implemented in the
 *  appropriate template.
 *  
 */
using System; 
using System.Data; 
using System.Data.SqlClient;
using System.Collections.Generic;
using System.ComponentModel;
using Textfyre.TextfyreWeb.DataLayer;

namespace Textfyre.TextfyreWeb.BusinessLayer { 
    
    /// <summary>
    /// Base aspnet_Membership domain class. This class is generated for each build and should never be modified
    /// directly. To change the functionality, the domainBase.cs template should be modified and related code
    /// generations tested.
    /// </summary>
    [Serializable()]
    public abstract class aspnet_MembershipBase : INotifyPropertyChanged {

        #region Members
        /// <summary>
        /// Internal items collection for the aspnet_Membership domain class.
        /// </summary>
        private Textfyre.TextfyreWeb.BusinessLayer.aspnet_MembershipCollection _items = new aspnet_MembershipCollection();
        /// <summary>
        /// Internal recordset for the aspnet_Membership domain class.
        /// </summary>
        private Textfyre.TextfyreWeb.BusinessLayer.aspnet_MembershipRecordset _recordset = new aspnet_MembershipRecordset();

        /// <summary>
        /// Non-serialized instance of the aspnet_Membership data layer class.
        /// </summary>
        [NonSerialized]
        private Textfyre.TextfyreWeb.DataLayer.aspnet_MembershipData _dataFactory;

        /// <summary>
        /// String constant containing 'aspnet_Membership'.
        /// </summary>
        private const string TABLE_NAME = "aspnet_Membership";

        /// <summary>
        /// Property Changed event definition.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Notify Property changed event handler.
        /// </summary>
        private void NotifyPropertyChanged(String info) {
            if (PropertyChanged != null) {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }

        #endregion
        
        #region Constructors
        /// <summary> 
        /// Empty default constructor. 
        /// </summary> 
        public aspnet_MembershipBase() {
            _dataFactory = new aspnet_MembershipData();
        }

        public aspnet_MembershipBase(Guid UserId) : this() {
				Load(UserId);
		}                     
        
        /// <summary> 
        /// Recordset constructor. 
        /// </summary> 
        public aspnet_MembershipBase(Textfyre.TextfyreWeb.BusinessLayer.aspnet_MembershipRecordset Recordset) : this() {             
            _recordset = Recordset; 
            _recordset.IsDirty = false; 
        }
        #endregion 
        
        #region Methods
        
        /// <summary>
        /// Load method that retrieves a record from the aspnet_Membership table by the primary key id.
        /// </summary>
        public Textfyre.TextfyreWeb.BusinessLayer.aspnet_MembershipRecordset Load(Guid UserId) {
            _recordset = DataFactory.Getaspnet_MembershipById(UserId);
            return _recordset;
        }

        /// <summary>
        /// LoadAll function that will load all records from the aspnet_Membership table.
        /// </summary>
        public Textfyre.TextfyreWeb.BusinessLayer.aspnet_MembershipCollection LoadAll() {
            Fill(DataFactory.GetAllaspnet_Membership());
            return _items;
        }

        /// <summary>
        /// Mark a record for deletion. Record is not physically deleted until .Save() is called.
        /// </summary>
        public virtual void Delete() {
            _recordset.IsDeleted = true;
        }

        /// <summary>
        /// Delete a record and commit the deletion to the database.
        /// </summary>
        public virtual void DeleteNow() {
            _recordset.IsDeleted = true;
            Save();
        }

        /// <summary>
        /// Overload for calling save without concern for the new primary key on insert.
        /// </summary>
        public virtual int Save() {
            Guid newPrimaryKey;
            return Save(out newPrimaryKey);
        }

        /// <summary>
        /// Save the current record to the database.
        /// </summary>
        public virtual int Save(out Guid newPrimaryKey)
        {
            int ReturnValue = -1;
            newPrimaryKey = Guid.Empty;
            
            if (_recordset.IsDeleted) {
                ReturnValue = DataFactory.Deleteaspnet_Membership(_recordset.UserId);                
            } else {
                if (_recordset.UserId == Guid.Empty) {
                    newPrimaryKey = _dataFactory.Insertaspnet_Membership(_recordset);
					if (newPrimaryKey != Guid.Empty)
						ReturnValue = -1;
					else
						ReturnValue = 0;;                    
                } else {
                    if(_recordset.IsDirty) {    
                        ReturnValue = DataFactory.Updateaspnet_Membership(_recordset);                        
                    }
                }

                _recordset.IsDirty = false;
            }

            if (DataFactory.CacheManager != null) {
                string cacheKey = DataFactory.CacheManager.CreateCacheKey(TABLE_NAME, null);
                DataFactory.CacheManager.Remove2(cacheKey);
            }

            return ReturnValue;
        }


        /// <summary>
        /// Fill a collection of recordsets from the data layer list.
        /// </summary>
        protected void Fill(List<Textfyre.TextfyreWeb.BusinessLayer.aspnet_MembershipRecordset> recs) {
            Items.Fill(recs);
            _items.IsCollectionDirty = false;
        }
        #endregion

        #region Properties


		public virtual Guid ApplicationId {
			get { return _recordset.ApplicationId; }
			set {
				if (_recordset.ApplicationId != value) {
					_recordset.ApplicationId = value;
					NotifyPropertyChanged("ApplicationId");
				}
			}
		}

		public virtual Guid UserId {
			get { return _recordset.UserId; }
			set {
				if (_recordset.UserId != value) {
					_recordset.UserId = value;
					NotifyPropertyChanged("UserId");
				}
			}
		}

		public virtual string Password {
			get { return _recordset.Password; }
			set {
				if (_recordset.Password != value) {
					_recordset.Password = value;
					NotifyPropertyChanged("Password");
				}
			}
		}

		public virtual Int32 PasswordFormat {
			get { return _recordset.PasswordFormat; }
			set {
				if (_recordset.PasswordFormat != value) {
					_recordset.PasswordFormat = value;
					NotifyPropertyChanged("PasswordFormat");
				}
			}
		}

		public virtual string PasswordSalt {
			get { return _recordset.PasswordSalt; }
			set {
				if (_recordset.PasswordSalt != value) {
					_recordset.PasswordSalt = value;
					NotifyPropertyChanged("PasswordSalt");
				}
			}
		}

		public virtual string MobilePIN {
			get { return _recordset.MobilePIN; }
			set {
				if (_recordset.MobilePIN != value) {
					_recordset.MobilePIN = value;
					NotifyPropertyChanged("MobilePIN");
				}
			}
		}

		public virtual string Email {
			get { return _recordset.Email; }
			set {
				if (_recordset.Email != value) {
					_recordset.Email = value;
					NotifyPropertyChanged("Email");
				}
			}
		}

		public virtual string LoweredEmail {
			get { return _recordset.LoweredEmail; }
			set {
				if (_recordset.LoweredEmail != value) {
					_recordset.LoweredEmail = value;
					NotifyPropertyChanged("LoweredEmail");
				}
			}
		}

		public virtual string PasswordQuestion {
			get { return _recordset.PasswordQuestion; }
			set {
				if (_recordset.PasswordQuestion != value) {
					_recordset.PasswordQuestion = value;
					NotifyPropertyChanged("PasswordQuestion");
				}
			}
		}

		public virtual string PasswordAnswer {
			get { return _recordset.PasswordAnswer; }
			set {
				if (_recordset.PasswordAnswer != value) {
					_recordset.PasswordAnswer = value;
					NotifyPropertyChanged("PasswordAnswer");
				}
			}
		}

		public virtual bool IsApproved {
			get { return _recordset.IsApproved; }
			set {
				if (_recordset.IsApproved != value) {
					_recordset.IsApproved = value;
					NotifyPropertyChanged("IsApproved");
				}
			}
		}

		public virtual bool IsLockedOut {
			get { return _recordset.IsLockedOut; }
			set {
				if (_recordset.IsLockedOut != value) {
					_recordset.IsLockedOut = value;
					NotifyPropertyChanged("IsLockedOut");
				}
			}
		}

		public virtual DateTime CreateDate {
			get { return _recordset.CreateDate; }
			set {
				if (_recordset.CreateDate != value) {
					_recordset.CreateDate = value;
					NotifyPropertyChanged("CreateDate");
				}
			}
		}

		public virtual DateTime LastLoginDate {
			get { return _recordset.LastLoginDate; }
			set {
				if (_recordset.LastLoginDate != value) {
					_recordset.LastLoginDate = value;
					NotifyPropertyChanged("LastLoginDate");
				}
			}
		}

		public virtual DateTime LastPasswordChangedDate {
			get { return _recordset.LastPasswordChangedDate; }
			set {
				if (_recordset.LastPasswordChangedDate != value) {
					_recordset.LastPasswordChangedDate = value;
					NotifyPropertyChanged("LastPasswordChangedDate");
				}
			}
		}

		public virtual DateTime LastLockoutDate {
			get { return _recordset.LastLockoutDate; }
			set {
				if (_recordset.LastLockoutDate != value) {
					_recordset.LastLockoutDate = value;
					NotifyPropertyChanged("LastLockoutDate");
				}
			}
		}

		public virtual Int32 FailedPasswordAttemptCount {
			get { return _recordset.FailedPasswordAttemptCount; }
			set {
				if (_recordset.FailedPasswordAttemptCount != value) {
					_recordset.FailedPasswordAttemptCount = value;
					NotifyPropertyChanged("FailedPasswordAttemptCount");
				}
			}
		}

		public virtual DateTime FailedPasswordAttemptWindowStart {
			get { return _recordset.FailedPasswordAttemptWindowStart; }
			set {
				if (_recordset.FailedPasswordAttemptWindowStart != value) {
					_recordset.FailedPasswordAttemptWindowStart = value;
					NotifyPropertyChanged("FailedPasswordAttemptWindowStart");
				}
			}
		}

		public virtual Int32 FailedPasswordAnswerAttemptCount {
			get { return _recordset.FailedPasswordAnswerAttemptCount; }
			set {
				if (_recordset.FailedPasswordAnswerAttemptCount != value) {
					_recordset.FailedPasswordAnswerAttemptCount = value;
					NotifyPropertyChanged("FailedPasswordAnswerAttemptCount");
				}
			}
		}

		public virtual DateTime FailedPasswordAnswerAttemptWindowStart {
			get { return _recordset.FailedPasswordAnswerAttemptWindowStart; }
			set {
				if (_recordset.FailedPasswordAnswerAttemptWindowStart != value) {
					_recordset.FailedPasswordAnswerAttemptWindowStart = value;
					NotifyPropertyChanged("FailedPasswordAnswerAttemptWindowStart");
				}
			}
		}

		public virtual string Comment {
			get { return _recordset.Comment; }
			set {
				if (_recordset.Comment != value) {
					_recordset.Comment = value;
					NotifyPropertyChanged("Comment");
				}
			}
		}


        /// <summary>
        /// Current recordset.
        /// </summary>
        public virtual Textfyre.TextfyreWeb.BusinessLayer.aspnet_MembershipRecordset Recordset { 
            get { return _recordset; } 
            set { _recordset = value; } 
        } 
        
        /// <summary>
        /// Flag that identifies a modified record.
        /// </summary>
        public virtual bool IsDirty { 
            get { return _recordset.IsDirty; } 
            set { _recordset.IsDirty = value; } 
        } 

        /// <summary>
        /// Instance of DataBase class to enable data layer execution.
        /// </summary>
        protected Textfyre.TextfyreWeb.DataLayer.aspnet_MembershipData DataFactory { 
            get {
                if (_dataFactory == null)
                    _dataFactory = new aspnet_MembershipData();
                return _dataFactory;
            } 
        }

        /// <summary>
        /// Collection of records.
        /// </summary>
        public Textfyre.TextfyreWeb.BusinessLayer.aspnet_MembershipCollection Items {
            get {
                if (_items == null)
                    _items = new Textfyre.TextfyreWeb.BusinessLayer.aspnet_MembershipCollection();
                return _items;
            }
            set {
                _items = value;
            }
        }

        /// <summary>
        /// Collection of recordsets.
        /// </summary>
        public List<Textfyre.TextfyreWeb.BusinessLayer.aspnet_MembershipRecordset> ItemsData {
            get {
                List<Textfyre.TextfyreWeb.BusinessLayer.aspnet_MembershipRecordset> recs = new List<Textfyre.TextfyreWeb.BusinessLayer.aspnet_MembershipRecordset>();
                foreach(Textfyre.TextfyreWeb.BusinessLayer.aspnet_Membership entity in Items) {
                    recs.Add((Textfyre.TextfyreWeb.BusinessLayer.aspnet_MembershipRecordset)entity.Recordset.Clone());
                }

                return recs;
            }
        }
        #endregion

        #region Sorting Delegates
        /// <summary>
        /// Internal class containing sorting delegates.
        /// </summary>
        public class SortBy
        {
			public static Comparison<aspnet_Membership> ApplicationIdColumnASC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o1.ApplicationId.CompareTo(o2.ApplicationId);
				};

			public static Comparison<aspnet_Membership> ApplicationIdColumnDESC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o2.ApplicationId.CompareTo(o1.ApplicationId);
				};

			public static Comparison<aspnet_Membership> UserIdColumnASC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o1.UserId.CompareTo(o2.UserId);
				};

			public static Comparison<aspnet_Membership> UserIdColumnDESC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o2.UserId.CompareTo(o1.UserId);
				};

			public static Comparison<aspnet_Membership> PasswordColumnASC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o1.Password.CompareTo(o2.Password);
				};

			public static Comparison<aspnet_Membership> PasswordColumnDESC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o2.Password.CompareTo(o1.Password);
				};

			public static Comparison<aspnet_Membership> PasswordFormatColumnASC =
					delegate(aspnet_Membership o1, aspnet_Membership o2)
					{
						return Nullable.Compare<Int32>(o1.PasswordFormat, o2.PasswordFormat);
					};

			public static Comparison<aspnet_Membership> PasswordFormatColumnDESC =
					delegate(aspnet_Membership o1, aspnet_Membership o2)
					{
						return Nullable.Compare<Int32>(o2.PasswordFormat, o1.PasswordFormat);
					};

			public static Comparison<aspnet_Membership> PasswordSaltColumnASC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o1.PasswordSalt.CompareTo(o2.PasswordSalt);
				};

			public static Comparison<aspnet_Membership> PasswordSaltColumnDESC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o2.PasswordSalt.CompareTo(o1.PasswordSalt);
				};

			public static Comparison<aspnet_Membership> MobilePINColumnASC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o1.MobilePIN.CompareTo(o2.MobilePIN);
				};

			public static Comparison<aspnet_Membership> MobilePINColumnDESC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o2.MobilePIN.CompareTo(o1.MobilePIN);
				};

			public static Comparison<aspnet_Membership> EmailColumnASC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o1.Email.CompareTo(o2.Email);
				};

			public static Comparison<aspnet_Membership> EmailColumnDESC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o2.Email.CompareTo(o1.Email);
				};

			public static Comparison<aspnet_Membership> LoweredEmailColumnASC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o1.LoweredEmail.CompareTo(o2.LoweredEmail);
				};

			public static Comparison<aspnet_Membership> LoweredEmailColumnDESC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o2.LoweredEmail.CompareTo(o1.LoweredEmail);
				};

			public static Comparison<aspnet_Membership> PasswordQuestionColumnASC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o1.PasswordQuestion.CompareTo(o2.PasswordQuestion);
				};

			public static Comparison<aspnet_Membership> PasswordQuestionColumnDESC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o2.PasswordQuestion.CompareTo(o1.PasswordQuestion);
				};

			public static Comparison<aspnet_Membership> PasswordAnswerColumnASC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o1.PasswordAnswer.CompareTo(o2.PasswordAnswer);
				};

			public static Comparison<aspnet_Membership> PasswordAnswerColumnDESC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o2.PasswordAnswer.CompareTo(o1.PasswordAnswer);
				};

			public static Comparison<aspnet_Membership> IsApprovedColumnASC =
					delegate(aspnet_Membership o1, aspnet_Membership o2)
					{
						return Nullable.Compare<bool>(o1.IsApproved, o2.IsApproved);
					};

			public static Comparison<aspnet_Membership> IsApprovedColumnDESC =
					delegate(aspnet_Membership o1, aspnet_Membership o2)
					{
						return Nullable.Compare<bool>(o2.IsApproved, o1.IsApproved);
					};

			public static Comparison<aspnet_Membership> IsLockedOutColumnASC =
					delegate(aspnet_Membership o1, aspnet_Membership o2)
					{
						return Nullable.Compare<bool>(o1.IsLockedOut, o2.IsLockedOut);
					};

			public static Comparison<aspnet_Membership> IsLockedOutColumnDESC =
					delegate(aspnet_Membership o1, aspnet_Membership o2)
					{
						return Nullable.Compare<bool>(o2.IsLockedOut, o1.IsLockedOut);
					};

			public static Comparison<aspnet_Membership> CreateDateColumnASC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o1.CreateDate.CompareTo(o2.CreateDate);
				};

			public static Comparison<aspnet_Membership> CreateDateColumnDESC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o2.CreateDate.CompareTo(o1.CreateDate);
				};

			public static Comparison<aspnet_Membership> LastLoginDateColumnASC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o1.LastLoginDate.CompareTo(o2.LastLoginDate);
				};

			public static Comparison<aspnet_Membership> LastLoginDateColumnDESC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o2.LastLoginDate.CompareTo(o1.LastLoginDate);
				};

			public static Comparison<aspnet_Membership> LastPasswordChangedDateColumnASC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o1.LastPasswordChangedDate.CompareTo(o2.LastPasswordChangedDate);
				};

			public static Comparison<aspnet_Membership> LastPasswordChangedDateColumnDESC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o2.LastPasswordChangedDate.CompareTo(o1.LastPasswordChangedDate);
				};

			public static Comparison<aspnet_Membership> LastLockoutDateColumnASC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o1.LastLockoutDate.CompareTo(o2.LastLockoutDate);
				};

			public static Comparison<aspnet_Membership> LastLockoutDateColumnDESC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o2.LastLockoutDate.CompareTo(o1.LastLockoutDate);
				};

			public static Comparison<aspnet_Membership> FailedPasswordAttemptCountColumnASC =
					delegate(aspnet_Membership o1, aspnet_Membership o2)
					{
						return Nullable.Compare<Int32>(o1.FailedPasswordAttemptCount, o2.FailedPasswordAttemptCount);
					};

			public static Comparison<aspnet_Membership> FailedPasswordAttemptCountColumnDESC =
					delegate(aspnet_Membership o1, aspnet_Membership o2)
					{
						return Nullable.Compare<Int32>(o2.FailedPasswordAttemptCount, o1.FailedPasswordAttemptCount);
					};

			public static Comparison<aspnet_Membership> FailedPasswordAttemptWindowStartColumnASC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o1.FailedPasswordAttemptWindowStart.CompareTo(o2.FailedPasswordAttemptWindowStart);
				};

			public static Comparison<aspnet_Membership> FailedPasswordAttemptWindowStartColumnDESC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o2.FailedPasswordAttemptWindowStart.CompareTo(o1.FailedPasswordAttemptWindowStart);
				};

			public static Comparison<aspnet_Membership> FailedPasswordAnswerAttemptCountColumnASC =
					delegate(aspnet_Membership o1, aspnet_Membership o2)
					{
						return Nullable.Compare<Int32>(o1.FailedPasswordAnswerAttemptCount, o2.FailedPasswordAnswerAttemptCount);
					};

			public static Comparison<aspnet_Membership> FailedPasswordAnswerAttemptCountColumnDESC =
					delegate(aspnet_Membership o1, aspnet_Membership o2)
					{
						return Nullable.Compare<Int32>(o2.FailedPasswordAnswerAttemptCount, o1.FailedPasswordAnswerAttemptCount);
					};

			public static Comparison<aspnet_Membership> FailedPasswordAnswerAttemptWindowStartColumnASC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o1.FailedPasswordAnswerAttemptWindowStart.CompareTo(o2.FailedPasswordAnswerAttemptWindowStart);
				};

			public static Comparison<aspnet_Membership> FailedPasswordAnswerAttemptWindowStartColumnDESC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o2.FailedPasswordAnswerAttemptWindowStart.CompareTo(o1.FailedPasswordAnswerAttemptWindowStart);
				};

			public static Comparison<aspnet_Membership> CommentColumnASC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o1.Comment.CompareTo(o2.Comment);
				};

			public static Comparison<aspnet_Membership> CommentColumnDESC =
				delegate(aspnet_Membership o1, aspnet_Membership o2)
				{
					return o2.Comment.CompareTo(o1.Comment);
				};


        }

        #endregion
    } 
} 