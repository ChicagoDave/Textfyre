/*
 *  DO NOT EDIT THIS CLASS.
 * 
 *  This class is generated by a tool and should not be edited. If you need to change the functionality of 
 *  this class, you should discuss your changes with the team and they should be implemented in the
 *  appropriate template.
 *  
 */
using System; 
using System.Data; 
using System.Data.SqlClient;
using System.Collections.Generic;
using System.ComponentModel;
using Textfyre.TextfyreWeb.DataLayer;

namespace Textfyre.TextfyreWeb.BusinessLayer { 
    
    /// <summary>
    /// Base aspnet_PersonalizationAllUsers domain class. This class is generated for each build and should never be modified
    /// directly. To change the functionality, the domainBase.cs template should be modified and related code
    /// generations tested.
    /// </summary>
    [Serializable()]
    public abstract class aspnet_PersonalizationAllUsersBase : INotifyPropertyChanged {

        #region Members
        /// <summary>
        /// Internal items collection for the aspnet_PersonalizationAllUsers domain class.
        /// </summary>
        private Textfyre.TextfyreWeb.BusinessLayer.aspnet_PersonalizationAllUsersCollection _items = new aspnet_PersonalizationAllUsersCollection();
        /// <summary>
        /// Internal recordset for the aspnet_PersonalizationAllUsers domain class.
        /// </summary>
        private Textfyre.TextfyreWeb.BusinessLayer.aspnet_PersonalizationAllUsersRecordset _recordset = new aspnet_PersonalizationAllUsersRecordset();

        /// <summary>
        /// Non-serialized instance of the aspnet_PersonalizationAllUsers data layer class.
        /// </summary>
        [NonSerialized]
        private Textfyre.TextfyreWeb.DataLayer.aspnet_PersonalizationAllUsersData _dataFactory;

        /// <summary>
        /// String constant containing 'aspnet_PersonalizationAllUsers'.
        /// </summary>
        private const string TABLE_NAME = "aspnet_PersonalizationAllUsers";

        /// <summary>
        /// Property Changed event definition.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Notify Property changed event handler.
        /// </summary>
        private void NotifyPropertyChanged(String info) {
            if (PropertyChanged != null) {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }

        #endregion
        
        #region Constructors
        /// <summary> 
        /// Empty default constructor. 
        /// </summary> 
        public aspnet_PersonalizationAllUsersBase() {
            _dataFactory = new aspnet_PersonalizationAllUsersData();
        }

        public aspnet_PersonalizationAllUsersBase(Guid PathId) : this() {
				Load(PathId);
		}                     
        
        /// <summary> 
        /// Recordset constructor. 
        /// </summary> 
        public aspnet_PersonalizationAllUsersBase(Textfyre.TextfyreWeb.BusinessLayer.aspnet_PersonalizationAllUsersRecordset Recordset) : this() {             
            _recordset = Recordset; 
            _recordset.IsDirty = false; 
        }
        #endregion 
        
        #region Methods
        
        /// <summary>
        /// Load method that retrieves a record from the aspnet_PersonalizationAllUsers table by the primary key id.
        /// </summary>
        public Textfyre.TextfyreWeb.BusinessLayer.aspnet_PersonalizationAllUsersRecordset Load(Guid PathId) {
            _recordset = DataFactory.Getaspnet_PersonalizationAllUsersById(PathId);
            return _recordset;
        }

        /// <summary>
        /// LoadAll function that will load all records from the aspnet_PersonalizationAllUsers table.
        /// </summary>
        public Textfyre.TextfyreWeb.BusinessLayer.aspnet_PersonalizationAllUsersCollection LoadAll() {
            Fill(DataFactory.GetAllaspnet_PersonalizationAllUsers());
            return _items;
        }

        /// <summary>
        /// Mark a record for deletion. Record is not physically deleted until .Save() is called.
        /// </summary>
        public virtual void Delete() {
            _recordset.IsDeleted = true;
        }

        /// <summary>
        /// Delete a record and commit the deletion to the database.
        /// </summary>
        public virtual void DeleteNow() {
            _recordset.IsDeleted = true;
            Save();
        }

        /// <summary>
        /// Overload for calling save without concern for the new primary key on insert.
        /// </summary>
        public virtual int Save() {
            Guid newPrimaryKey;
            return Save(out newPrimaryKey);
        }

        /// <summary>
        /// Save the current record to the database.
        /// </summary>
        public virtual int Save(out Guid newPrimaryKey)
        {
            int ReturnValue = -1;
            newPrimaryKey = Guid.Empty;
            
            if (_recordset.IsDeleted) {
                ReturnValue = DataFactory.Deleteaspnet_PersonalizationAllUsers(_recordset.PathId);                
            } else {
                if (_recordset.PathId == Guid.Empty) {
                    newPrimaryKey = _dataFactory.Insertaspnet_PersonalizationAllUsers(_recordset);
					if (newPrimaryKey != Guid.Empty)
						ReturnValue = -1;
					else
						ReturnValue = 0;;                    
                } else {
                    if(_recordset.IsDirty) {    
                        ReturnValue = DataFactory.Updateaspnet_PersonalizationAllUsers(_recordset);                        
                    }
                }

                _recordset.IsDirty = false;
            }

            if (DataFactory.CacheManager != null) {
                string cacheKey = DataFactory.CacheManager.CreateCacheKey(TABLE_NAME, null);
                DataFactory.CacheManager.Remove2(cacheKey);
            }

            return ReturnValue;
        }


        /// <summary>
        /// Fill a collection of recordsets from the data layer list.
        /// </summary>
        protected void Fill(List<Textfyre.TextfyreWeb.BusinessLayer.aspnet_PersonalizationAllUsersRecordset> recs) {
            Items.Fill(recs);
            _items.IsCollectionDirty = false;
        }
        #endregion

        #region Properties


		public virtual Guid PathId {
			get { return _recordset.PathId; }
			set {
				if (_recordset.PathId != value) {
					_recordset.PathId = value;
					NotifyPropertyChanged("PathId");
				}
			}
		}

		public virtual byte[] PageSettings {
			get { return _recordset.PageSettings; }
			set {
				if (_recordset.PageSettings != value) {
					_recordset.PageSettings = value;
					NotifyPropertyChanged("PageSettings");
				}
			}
		}

		public virtual DateTime LastUpdatedDate {
			get { return _recordset.LastUpdatedDate; }
			set {
				if (_recordset.LastUpdatedDate != value) {
					_recordset.LastUpdatedDate = value;
					NotifyPropertyChanged("LastUpdatedDate");
				}
			}
		}


        /// <summary>
        /// Current recordset.
        /// </summary>
        public virtual Textfyre.TextfyreWeb.BusinessLayer.aspnet_PersonalizationAllUsersRecordset Recordset { 
            get { return _recordset; } 
            set { _recordset = value; } 
        } 
        
        /// <summary>
        /// Flag that identifies a modified record.
        /// </summary>
        public virtual bool IsDirty { 
            get { return _recordset.IsDirty; } 
            set { _recordset.IsDirty = value; } 
        } 

        /// <summary>
        /// Instance of DataBase class to enable data layer execution.
        /// </summary>
        protected Textfyre.TextfyreWeb.DataLayer.aspnet_PersonalizationAllUsersData DataFactory { 
            get {
                if (_dataFactory == null)
                    _dataFactory = new aspnet_PersonalizationAllUsersData();
                return _dataFactory;
            } 
        }

        /// <summary>
        /// Collection of records.
        /// </summary>
        public Textfyre.TextfyreWeb.BusinessLayer.aspnet_PersonalizationAllUsersCollection Items {
            get {
                if (_items == null)
                    _items = new Textfyre.TextfyreWeb.BusinessLayer.aspnet_PersonalizationAllUsersCollection();
                return _items;
            }
            set {
                _items = value;
            }
        }

        /// <summary>
        /// Collection of recordsets.
        /// </summary>
        public List<Textfyre.TextfyreWeb.BusinessLayer.aspnet_PersonalizationAllUsersRecordset> ItemsData {
            get {
                List<Textfyre.TextfyreWeb.BusinessLayer.aspnet_PersonalizationAllUsersRecordset> recs = new List<Textfyre.TextfyreWeb.BusinessLayer.aspnet_PersonalizationAllUsersRecordset>();
                foreach(Textfyre.TextfyreWeb.BusinessLayer.aspnet_PersonalizationAllUsers entity in Items) {
                    recs.Add((Textfyre.TextfyreWeb.BusinessLayer.aspnet_PersonalizationAllUsersRecordset)entity.Recordset.Clone());
                }

                return recs;
            }
        }
        #endregion

        #region Sorting Delegates
        /// <summary>
        /// Internal class containing sorting delegates.
        /// </summary>
        public class SortBy
        {
			public static Comparison<aspnet_PersonalizationAllUsers> PathIdColumnASC =
				delegate(aspnet_PersonalizationAllUsers o1, aspnet_PersonalizationAllUsers o2)
				{
					return o1.PathId.CompareTo(o2.PathId);
				};

			public static Comparison<aspnet_PersonalizationAllUsers> PathIdColumnDESC =
				delegate(aspnet_PersonalizationAllUsers o1, aspnet_PersonalizationAllUsers o2)
				{
					return o2.PathId.CompareTo(o1.PathId);
				};

			public static Comparison<aspnet_PersonalizationAllUsers> LastUpdatedDateColumnASC =
				delegate(aspnet_PersonalizationAllUsers o1, aspnet_PersonalizationAllUsers o2)
				{
					return o1.LastUpdatedDate.CompareTo(o2.LastUpdatedDate);
				};

			public static Comparison<aspnet_PersonalizationAllUsers> LastUpdatedDateColumnDESC =
				delegate(aspnet_PersonalizationAllUsers o1, aspnet_PersonalizationAllUsers o2)
				{
					return o2.LastUpdatedDate.CompareTo(o1.LastUpdatedDate);
				};


        }

        #endregion
    } 
} 