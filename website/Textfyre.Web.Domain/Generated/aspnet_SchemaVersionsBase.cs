/*
 *  DO NOT EDIT THIS CLASS.
 * 
 *  This class is generated by a tool and should not be edited. If you need to change the functionality of 
 *  this class, you should discuss your changes with the team and they should be implemented in the
 *  appropriate template.
 *  
 */
using System; 
using System.Data; 
using System.Data.SqlClient;
using System.Collections.Generic;
using System.ComponentModel;
using Textfyre.TextfyreWeb.DataLayer;

namespace Textfyre.TextfyreWeb.BusinessLayer { 
    
    /// <summary>
    /// Base aspnet_SchemaVersions domain class. This class is generated for each build and should never be modified
    /// directly. To change the functionality, the domainBase.cs template should be modified and related code
    /// generations tested.
    /// </summary>
    [Serializable()]
    public abstract class aspnet_SchemaVersionsBase : INotifyPropertyChanged {

        #region Members
        /// <summary>
        /// Internal items collection for the aspnet_SchemaVersions domain class.
        /// </summary>
        private Textfyre.TextfyreWeb.BusinessLayer.aspnet_SchemaVersionsCollection _items = new aspnet_SchemaVersionsCollection();
        /// <summary>
        /// Internal recordset for the aspnet_SchemaVersions domain class.
        /// </summary>
        private Textfyre.TextfyreWeb.BusinessLayer.aspnet_SchemaVersionsRecordset _recordset = new aspnet_SchemaVersionsRecordset();

        /// <summary>
        /// Non-serialized instance of the aspnet_SchemaVersions data layer class.
        /// </summary>
        [NonSerialized]
        private Textfyre.TextfyreWeb.DataLayer.aspnet_SchemaVersionsData _dataFactory;

        /// <summary>
        /// String constant containing 'aspnet_SchemaVersions'.
        /// </summary>
        private const string TABLE_NAME = "aspnet_SchemaVersions";

        /// <summary>
        /// Property Changed event definition.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Notify Property changed event handler.
        /// </summary>
        private void NotifyPropertyChanged(String info) {
            if (PropertyChanged != null) {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }

        #endregion
        
        #region Constructors
        /// <summary> 
        /// Empty default constructor. 
        /// </summary> 
        public aspnet_SchemaVersionsBase() {
            _dataFactory = new aspnet_SchemaVersionsData();
        }

        public aspnet_SchemaVersionsBase(string Feature, string CompatibleSchemaVersion) : this() {

				Load(Feature, CompatibleSchemaVersion);
		}                     
        
        /// <summary> 
        /// Recordset constructor. 
        /// </summary> 
        public aspnet_SchemaVersionsBase(Textfyre.TextfyreWeb.BusinessLayer.aspnet_SchemaVersionsRecordset Recordset) : this() {             
            _recordset = Recordset; 
            _recordset.IsDirty = false; 
        }
        #endregion 
        
        #region Methods
        
        /// <summary>
        /// Load method that retrieves a record from the aspnet_SchemaVersions table by the primary key id.
        /// </summary>
        public Textfyre.TextfyreWeb.BusinessLayer.aspnet_SchemaVersionsRecordset Load(string Feature, string CompatibleSchemaVersion) {
            _recordset = DataFactory.Getaspnet_SchemaVersionsById(Feature, CompatibleSchemaVersion);
            return _recordset;
        }

        /// <summary>
        /// LoadAll function that will load all records from the aspnet_SchemaVersions table.
        /// </summary>
        public Textfyre.TextfyreWeb.BusinessLayer.aspnet_SchemaVersionsCollection LoadAll() {
            Fill(DataFactory.GetAllaspnet_SchemaVersions());
            return _items;
        }

        /// <summary>
        /// Mark a record for deletion. Record is not physically deleted until .Save() is called.
        /// </summary>
        public virtual void Delete() {
            _recordset.IsDeleted = true;
        }

        /// <summary>
        /// Delete a record and commit the deletion to the database.
        /// </summary>
        public virtual void DeleteNow() {
            _recordset.IsDeleted = true;
            Save(CompositeSaveFlag.Delete);
        }

        public enum CompositeSaveFlag {
            Insert,
            Update,
            Delete
        }

        /// <summary>
        /// Save the current record to the database.
        /// </summary>
        public virtual int Save(CompositeSaveFlag compositeSaveFlag)
        {
            int ReturnValue = -1;
            
            if (_recordset.IsDeleted || compositeSaveFlag == CompositeSaveFlag.Delete) {
                ReturnValue = DataFactory.Deleteaspnet_SchemaVersions(_recordset.Feature, _recordset.CompatibleSchemaVersion);                
            } else {
                if (compositeSaveFlag == CompositeSaveFlag.Insert) {
                                        
                } else {
                    if(_recordset.IsDirty) {    
                        ReturnValue = DataFactory.Updateaspnet_SchemaVersions(_recordset);                        
                    }
                }

                _recordset.IsDirty = false;
            }

            if (DataFactory.CacheManager != null) {
                string cacheKey = DataFactory.CacheManager.CreateCacheKey(TABLE_NAME, null);
                DataFactory.CacheManager.Remove2(cacheKey);
            }

            return ReturnValue;
        }


        /// <summary>
        /// Fill a collection of recordsets from the data layer list.
        /// </summary>
        protected void Fill(List<Textfyre.TextfyreWeb.BusinessLayer.aspnet_SchemaVersionsRecordset> recs) {
            Items.Fill(recs);
            _items.IsCollectionDirty = false;
        }
        #endregion

        #region Properties


		public virtual string Feature {
			get { return _recordset.Feature; }
			set {
				if (_recordset.Feature != value) {
					_recordset.Feature = value;
					NotifyPropertyChanged("Feature");
				}
			}
		}

		public virtual string CompatibleSchemaVersion {
			get { return _recordset.CompatibleSchemaVersion; }
			set {
				if (_recordset.CompatibleSchemaVersion != value) {
					_recordset.CompatibleSchemaVersion = value;
					NotifyPropertyChanged("CompatibleSchemaVersion");
				}
			}
		}

		public virtual bool IsCurrentVersion {
			get { return _recordset.IsCurrentVersion; }
			set {
				if (_recordset.IsCurrentVersion != value) {
					_recordset.IsCurrentVersion = value;
					NotifyPropertyChanged("IsCurrentVersion");
				}
			}
		}


        /// <summary>
        /// Current recordset.
        /// </summary>
        public virtual Textfyre.TextfyreWeb.BusinessLayer.aspnet_SchemaVersionsRecordset Recordset { 
            get { return _recordset; } 
            set { _recordset = value; } 
        } 
        
        /// <summary>
        /// Flag that identifies a modified record.
        /// </summary>
        public virtual bool IsDirty { 
            get { return _recordset.IsDirty; } 
            set { _recordset.IsDirty = value; } 
        } 

        /// <summary>
        /// Instance of DataBase class to enable data layer execution.
        /// </summary>
        protected Textfyre.TextfyreWeb.DataLayer.aspnet_SchemaVersionsData DataFactory { 
            get {
                if (_dataFactory == null)
                    _dataFactory = new aspnet_SchemaVersionsData();
                return _dataFactory;
            } 
        }

        /// <summary>
        /// Collection of records.
        /// </summary>
        public Textfyre.TextfyreWeb.BusinessLayer.aspnet_SchemaVersionsCollection Items {
            get {
                if (_items == null)
                    _items = new Textfyre.TextfyreWeb.BusinessLayer.aspnet_SchemaVersionsCollection();
                return _items;
            }
            set {
                _items = value;
            }
        }

        /// <summary>
        /// Collection of recordsets.
        /// </summary>
        public List<Textfyre.TextfyreWeb.BusinessLayer.aspnet_SchemaVersionsRecordset> ItemsData {
            get {
                List<Textfyre.TextfyreWeb.BusinessLayer.aspnet_SchemaVersionsRecordset> recs = new List<Textfyre.TextfyreWeb.BusinessLayer.aspnet_SchemaVersionsRecordset>();
                foreach(Textfyre.TextfyreWeb.BusinessLayer.aspnet_SchemaVersions entity in Items) {
                    recs.Add((Textfyre.TextfyreWeb.BusinessLayer.aspnet_SchemaVersionsRecordset)entity.Recordset.Clone());
                }

                return recs;
            }
        }
        #endregion

        #region Sorting Delegates
        /// <summary>
        /// Internal class containing sorting delegates.
        /// </summary>
        public class SortBy
        {
			public static Comparison<aspnet_SchemaVersions> FeatureColumnASC =
				delegate(aspnet_SchemaVersions o1, aspnet_SchemaVersions o2)
				{
					return o1.Feature.CompareTo(o2.Feature);
				};

			public static Comparison<aspnet_SchemaVersions> FeatureColumnDESC =
				delegate(aspnet_SchemaVersions o1, aspnet_SchemaVersions o2)
				{
					return o2.Feature.CompareTo(o1.Feature);
				};

			public static Comparison<aspnet_SchemaVersions> CompatibleSchemaVersionColumnASC =
				delegate(aspnet_SchemaVersions o1, aspnet_SchemaVersions o2)
				{
					return o1.CompatibleSchemaVersion.CompareTo(o2.CompatibleSchemaVersion);
				};

			public static Comparison<aspnet_SchemaVersions> CompatibleSchemaVersionColumnDESC =
				delegate(aspnet_SchemaVersions o1, aspnet_SchemaVersions o2)
				{
					return o2.CompatibleSchemaVersion.CompareTo(o1.CompatibleSchemaVersion);
				};

			public static Comparison<aspnet_SchemaVersions> IsCurrentVersionColumnASC =
					delegate(aspnet_SchemaVersions o1, aspnet_SchemaVersions o2)
					{
						return Nullable.Compare<bool>(o1.IsCurrentVersion, o2.IsCurrentVersion);
					};

			public static Comparison<aspnet_SchemaVersions> IsCurrentVersionColumnDESC =
					delegate(aspnet_SchemaVersions o1, aspnet_SchemaVersions o2)
					{
						return Nullable.Compare<bool>(o2.IsCurrentVersion, o1.IsCurrentVersion);
					};


        }

        #endregion
    } 
} 