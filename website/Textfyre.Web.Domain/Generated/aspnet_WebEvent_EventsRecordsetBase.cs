/*
 *  DO NOT EDIT THIS CLASS.
 * 
 *  This class is generated by a tool and should not be edited. If you need to change the functionality of 
 *  this class, you should discuss your changes with the team and they should be implemented in the
 *  appropriate template.
 *  
 */
using System;

namespace Textfyre.TextfyreWeb.BusinessLayer {   
    /// <summary>
    /// aspnet_WebEvent_EventsRecordsetBase class.
    /// </summary>
    [Serializable()]
    public abstract class aspnet_WebEvent_EventsRecordsetBase { 
      #region Members

			/// <summary>
			/// EventId field.
			/// </summary>
			private string _EventId;
			/// <summary>
			/// EventTimeUtc field.
			/// </summary>
			private DateTime _EventTimeUtc;
			/// <summary>
			/// EventTime field.
			/// </summary>
			private DateTime _EventTime;
			/// <summary>
			/// EventType field.
			/// </summary>
			private string _EventType;
			/// <summary>
			/// EventSequence field.
			/// </summary>
			private decimal _EventSequence;
			/// <summary>
			/// EventOccurrence field.
			/// </summary>
			private decimal _EventOccurrence;
			/// <summary>
			/// EventCode field.
			/// </summary>
			private Int32 _EventCode;
			/// <summary>
			/// EventDetailCode field.
			/// </summary>
			private Int32 _EventDetailCode;
			/// <summary>
			/// Message field.
			/// </summary>
			private string _Message;
			/// <summary>
			/// ApplicationPath field.
			/// </summary>
			private string _ApplicationPath;
			/// <summary>
			/// ApplicationVirtualPath field.
			/// </summary>
			private string _ApplicationVirtualPath;
			/// <summary>
			/// MachineName field.
			/// </summary>
			private string _MachineName;
			/// <summary>
			/// RequestUrl field.
			/// </summary>
			private string _RequestUrl;
			/// <summary>
			/// ExceptionType field.
			/// </summary>
			private string _ExceptionType;
			/// <summary>
			/// Details field.
			/// </summary>
			private string _Details;
      /// <summary>
      /// _isDirty field.
      /// </summary>
      private bool _isDirty = false;
      /// <summary>
      /// _isDeleted field.
      /// </summary>
      private bool _isDeleted = false;
      /// <summary>
      /// _isInserted field.
      /// </summary>
      private bool _isInserted = false;
      #endregion 

      #region Properties
        

		public string EventId {
			get { return _EventId; }
			set {
				if(_EventId != value) {
					_isDirty = true;
					_EventId = value;
				}
			}
		}

		public DateTime EventTimeUtc {
			get { return _EventTimeUtc; }
			set {
				if(_EventTimeUtc != value) {
					_isDirty = true;
					_EventTimeUtc = value;
				}
			}
		}

		public DateTime EventTime {
			get { return _EventTime; }
			set {
				if(_EventTime != value) {
					_isDirty = true;
					_EventTime = value;
				}
			}
		}

		public string EventType {
			get { return _EventType; }
			set {
				if(_EventType != value) {
					_isDirty = true;
					_EventType = value;
				}
			}
		}

		public decimal EventSequence {
			get { return _EventSequence; }
			set {
				if(_EventSequence != value) {
					_isDirty = true;
					_EventSequence = value;
				}
			}
		}

		public decimal EventOccurrence {
			get { return _EventOccurrence; }
			set {
				if(_EventOccurrence != value) {
					_isDirty = true;
					_EventOccurrence = value;
				}
			}
		}

		public Int32 EventCode {
			get { return _EventCode; }
			set {
				if(_EventCode != value) {
					_isDirty = true;
					_EventCode = value;
				}
			}
		}

		public Int32 EventDetailCode {
			get { return _EventDetailCode; }
			set {
				if(_EventDetailCode != value) {
					_isDirty = true;
					_EventDetailCode = value;
				}
			}
		}

		public string Message {
			get { return _Message; }
			set {
				if(_Message != value) {
					_isDirty = true;
					_Message = value;
				}
			}
		}

		public string ApplicationPath {
			get { return _ApplicationPath; }
			set {
				if(_ApplicationPath != value) {
					_isDirty = true;
					_ApplicationPath = value;
				}
			}
		}

		public string ApplicationVirtualPath {
			get { return _ApplicationVirtualPath; }
			set {
				if(_ApplicationVirtualPath != value) {
					_isDirty = true;
					_ApplicationVirtualPath = value;
				}
			}
		}

		public string MachineName {
			get { return _MachineName; }
			set {
				if(_MachineName != value) {
					_isDirty = true;
					_MachineName = value;
				}
			}
		}

		public string RequestUrl {
			get { return _RequestUrl; }
			set {
				if(_RequestUrl != value) {
					_isDirty = true;
					_RequestUrl = value;
				}
			}
		}

		public string ExceptionType {
			get { return _ExceptionType; }
			set {
				if(_ExceptionType != value) {
					_isDirty = true;
					_ExceptionType = value;
				}
			}
		}

		public string Details {
			get { return _Details; }
			set {
				if(_Details != value) {
					_isDirty = true;
					_Details = value;
				}
			}
		}

        
      /// <summary>
      /// Flag for when recordset data has changed.
      /// </summary>
      public bool IsDirty { 
          get { return _isDirty; } 
          set { _isDirty = value; } 
      } 
        
      /// <summary>
      /// Delete flag.
      /// </summary>
      public bool IsDeleted { 
          get { return _isDeleted; } 
          set { _isDeleted = value; } 
      }

      /// <summary>
      /// Insert flag for composite keys only.
      /// </summary>
      public bool IsInserted {
          get { return _isInserted; }
          set { _isInserted = value; }
      }
        
      #endregion 
        
      /// <summary>
      /// Empty constructor.
      /// </summary>
      public aspnet_WebEvent_EventsRecordsetBase() {
      } 

      /// <summary>
      /// Returns a new instance of the current recordset.
      /// </summary>
      /// <returns></returns>
      public virtual aspnet_WebEvent_EventsRecordset Clone() {
          aspnet_WebEvent_EventsRecordset newaspnet_WebEvent_EventsRS = new aspnet_WebEvent_EventsRecordset(); 
          newaspnet_WebEvent_EventsRS.EventId = _EventId;
					newaspnet_WebEvent_EventsRS.EventTimeUtc = _EventTimeUtc;
					newaspnet_WebEvent_EventsRS.EventTime = _EventTime;
					newaspnet_WebEvent_EventsRS.EventType = _EventType;
					newaspnet_WebEvent_EventsRS.EventSequence = _EventSequence;
					newaspnet_WebEvent_EventsRS.EventOccurrence = _EventOccurrence;
					newaspnet_WebEvent_EventsRS.EventCode = _EventCode;
					newaspnet_WebEvent_EventsRS.EventDetailCode = _EventDetailCode;
					newaspnet_WebEvent_EventsRS.Message = _Message;
					newaspnet_WebEvent_EventsRS.ApplicationPath = _ApplicationPath;
					newaspnet_WebEvent_EventsRS.ApplicationVirtualPath = _ApplicationVirtualPath;
					newaspnet_WebEvent_EventsRS.MachineName = _MachineName;
					newaspnet_WebEvent_EventsRS.RequestUrl = _RequestUrl;
					newaspnet_WebEvent_EventsRS.ExceptionType = _ExceptionType;
					newaspnet_WebEvent_EventsRS.Details = _Details;
					
          newaspnet_WebEvent_EventsRS.IsDirty = _isDirty;
          newaspnet_WebEvent_EventsRS.IsDeleted = _isDeleted;
          return newaspnet_WebEvent_EventsRS; 
      }

      /// <summary>
      /// Sets the identity column.
      /// </summary>
      /// <param name="IdentityValue"></param>
		public void SetIdentity(string IdentityValue) {
			_EventId = IdentityValue;
		}

    } 
} 